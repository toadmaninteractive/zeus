%% @author Igor compiler
%% @doc Compiler version: igorc 2.0.0
%% DO NOT EDIT THIS FILE - it is machine generated

-module(zeus_server_protocol).

-include_lib("stdlib/include/assert.hrl").
-include("zeus_server.hrl").

-export([
    zeus_instance_to_json/1,
    zeus_instance_from_json/1,
    zeus_user_to_json/1,
    zeus_user_from_json/1,
    zeus_role_to_json/1,
    zeus_role_from_json/1,
    zeus_realm_to_json/1,
    zeus_realm_from_json/1,
    reply_status_to_json/1,
    reply_status_from_json/1
]).

-export_type([
    zeus_instance/0,
    zeus_user/0,
    zeus_role/0,
    zeus_realm/0,
    reply_status/0
]).

-type zeus_instance() :: #zeus_instance{}.
-type zeus_user() :: #zeus_user{}.
-type zeus_role() :: #zeus_role{}.
-type zeus_realm() :: #zeus_realm{}.
-type reply_status() :: #reply_status{}.

-spec zeus_instance_to_json(zeus_instance()) -> igor_json:json_object().

zeus_instance_to_json(Record) ->
    #zeus_instance{
        id = Id,
        key = VarKey,
        title = Title,
        api_root = ApiRoot,
        api_key = ApiKey
    } = Record,
    ?assert(Id =/= undefined),
    ?assert(VarKey =/= undefined),
    ?assert(Title =/= undefined),
    ?assert(ApiRoot =/= undefined),
    ?assert(ApiKey =/= undefined),
    #{
        <<"id">> => igor_json:pack(Id, string),
        <<"key">> => igor_json:pack(VarKey, string),
        <<"title">> => igor_json:pack(Title, string),
        <<"api_root">> => igor_json:pack(ApiRoot, string),
        <<"api_key">> => igor_json:pack(ApiKey, string)
    }.

-spec zeus_instance_from_json(igor_json:json_object()) -> zeus_instance().

zeus_instance_from_json(Json) ->
    #zeus_instance{
        id = igor_json:parse(Json, <<"id">>, string),
        key = igor_json:parse(Json, <<"key">>, string),
        title = igor_json:parse(Json, <<"title">>, string),
        api_root = igor_json:parse(Json, <<"api_root">>, string),
        api_key = igor_json:parse(Json, <<"api_key">>, string)
    }.

-spec zeus_user_to_json(zeus_user()) -> igor_json:json_object().

zeus_user_to_json(Record) ->
    #zeus_user{
        id = Id,
        login = Login,
        realm = Realm,
        admin_roles = AdminRoles
    } = Record,
    ?assert(Id =/= undefined),
    ?assert(Login =/= undefined),
    ?assert(Realm =/= undefined),
    ?assert(AdminRoles =/= undefined),
    #{
        <<"id">> => igor_json:pack(Id, string),
        <<"login">> => igor_json:pack(Login, string),
        <<"realm">> => igor_json:pack(Realm, atom),
        <<"admin_roles">> => igor_json:pack(AdminRoles, {list, atom})
    }.

-spec zeus_user_from_json(igor_json:json_object()) -> zeus_user().

zeus_user_from_json(Json) ->
    #zeus_user{
        id = igor_json:parse(Json, <<"id">>, string),
        login = igor_json:parse(Json, <<"login">>, string),
        realm = igor_json:parse(Json, <<"realm">>, atom),
        admin_roles = igor_json:parse(Json, <<"admin_roles">>, {list, atom}, [])
    }.

-spec zeus_role_to_json(zeus_role()) -> igor_json:json_object().

zeus_role_to_json(Record) ->
    #zeus_role{
        id = Id,
        login = Login,
        realm = Realm,
        instance_id = InstanceId,
        roles = Roles
    } = Record,
    ?assert(Id =/= undefined),
    ?assert(Login =/= undefined),
    ?assert(Realm =/= undefined),
    ?assert(Roles =/= undefined),
    #{
        <<"id">> => igor_json:pack(Id, string),
        <<"login">> => igor_json:pack(Login, string),
        <<"realm">> => igor_json:pack(Realm, atom),
        <<"instance_id">> => igor_json:pack(InstanceId, string),
        <<"roles">> => igor_json:pack(Roles, {list, atom})
    }.

-spec zeus_role_from_json(igor_json:json_object()) -> zeus_role().

zeus_role_from_json(Json) ->
    #zeus_role{
        id = igor_json:parse(Json, <<"id">>, string),
        login = igor_json:parse(Json, <<"login">>, string),
        realm = igor_json:parse(Json, <<"realm">>, atom),
        instance_id = igor_json:parse(Json, <<"instance_id">>, string, undefined),
        roles = igor_json:parse(Json, <<"roles">>, {list, atom})
    }.

-spec zeus_realm_to_json(zeus_realm()) -> igor_json:json_object().

zeus_realm_to_json(Record) ->
    #zeus_realm{
        id = Id,
        name = Name,
        instance_id = InstanceId,
        roles = Roles
    } = Record,
    ?assert(Id =/= undefined),
    ?assert(Name =/= undefined),
    ?assert(Roles =/= undefined),
    #{
        <<"id">> => igor_json:pack(Id, string),
        <<"name">> => igor_json:pack(Name, atom),
        <<"instance_id">> => igor_json:pack(InstanceId, string),
        <<"roles">> => igor_json:pack(Roles, {list, atom})
    }.

-spec zeus_realm_from_json(igor_json:json_object()) -> zeus_realm().

zeus_realm_from_json(Json) ->
    #zeus_realm{
        id = igor_json:parse(Json, <<"id">>, string),
        name = igor_json:parse(Json, <<"name">>, atom),
        instance_id = igor_json:parse(Json, <<"instance_id">>, string, undefined),
        roles = igor_json:parse(Json, <<"roles">>, {list, atom}, [])
    }.

-spec reply_status_to_json(reply_status()) -> igor_json:json_object().

reply_status_to_json(Record) ->
    #reply_status{result = VarResult, error = Error, invalid_fields = InvalidFields} = Record,
    ?assert(VarResult =/= undefined),
    #{
        <<"result">> => igor_json:pack(VarResult, boolean),
        <<"error">> => igor_json:pack(Error, string),
        <<"invalid_fields">> => igor_json:pack(InvalidFields, {list, string})
    }.

-spec reply_status_from_json(igor_json:json_object()) -> reply_status().

reply_status_from_json(Json) ->
    #reply_status{
        result = igor_json:parse(Json, <<"result">>, boolean, true),
        error = igor_json:parse(Json, <<"error">>, string, undefined),
        invalid_fields = igor_json:parse(Json, <<"invalid_fields">>, {list, string}, undefined)
    }.

