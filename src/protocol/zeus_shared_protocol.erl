%% @author Igor compiler
%% @doc Compiler version: igorc 2.0.0
%% DO NOT EDIT THIS FILE - it is machine generated

-module(zeus_shared_protocol).

-include_lib("stdlib/include/assert.hrl").
-include_lib("xmerl/include/xmerl.hrl").
-include("zeus_shared.hrl").

-export([
    privilege_type_to_json/1,
    privilege_type_from_json/1,
    privilege_type_to_xml/1,
    privilege_type_from_xml/1,
    privilege_to_json/1,
    privilege_from_json/1,
    privilege_from_xml/1,
    privilege_to_xml/1,
    privilege_manage_users_to_json/1,
    privilege_manage_users_from_json/1,
    privilege_manage_users_to_xml/1,
    privilege_manage_users_from_xml/1,
    role_info_to_json/1,
    role_info_from_json/1,
    role_info_to_xml/1,
    role_info_from_xml/1,
    instance_to_json/1,
    instance_from_json/1,
    instance_to_xml/1,
    instance_from_xml/1,
    menu_to_json/1,
    menu_from_json/1,
    menu_to_xml/1,
    menu_from_xml/1,
    menu_item_to_json/1,
    menu_item_from_json/1,
    menu_item_to_xml/1,
    menu_item_from_xml/1,
    page_to_json/1,
    page_from_json/1,
    page_to_xml/1,
    page_from_xml/1,
    search_result_to_json/1,
    search_result_from_json/1,
    search_result_to_xml/1,
    search_result_from_xml/1,
    method_to_json/1,
    method_from_json/1,
    method_to_xml/1,
    method_from_xml/1,
    action_type_to_json/1,
    action_type_from_json/1,
    action_type_to_xml/1,
    action_type_from_xml/1,
    source_type_to_json/1,
    source_type_from_json/1,
    source_type_to_xml/1,
    source_type_from_xml/1,
    text_edit_kind_to_json/1,
    text_edit_kind_from_json/1,
    text_edit_kind_to_xml/1,
    text_edit_kind_from_xml/1,
    date_time_mode_to_json/1,
    date_time_mode_from_json/1,
    date_time_mode_to_xml/1,
    date_time_mode_from_xml/1,
    time_span_to_json/1,
    time_span_from_json/1,
    time_span_to_xml/1,
    time_span_from_xml/1,
    chart_type_to_json/1,
    chart_type_from_json/1,
    chart_type_to_xml/1,
    chart_type_from_xml/1,
    action_to_json/1,
    action_from_json/1,
    action_from_xml/1,
    action_to_xml/1,
    request_to_json/1,
    request_from_json/1,
    request_to_xml/1,
    request_from_xml/1,
    navigate_to_json/1,
    navigate_from_json/1,
    navigate_to_xml/1,
    navigate_from_xml/1,
    reload_to_json/1,
    reload_from_json/1,
    reload_to_xml/1,
    reload_from_xml/1,
    popup_to_json/1,
    popup_from_json/1,
    popup_to_xml/1,
    popup_from_xml/1,
    assign_to_json/1,
    assign_from_json/1,
    assign_to_xml/1,
    assign_from_xml/1,
    element_layout_to_json/1,
    element_layout_from_json/1,
    element_layout_to_xml/1,
    element_layout_from_xml/1,
    element_to_json/1,
    element_from_json/1,
    element_from_xml/1,
    element_to_xml/1,
    element_type_to_json/1,
    element_type_from_json/1,
    element_type_to_xml/1,
    element_type_from_xml/1,
    horizontal_to_json/1,
    horizontal_from_json/1,
    horizontal_to_xml/1,
    horizontal_from_xml/1,
    vertical_to_json/1,
    vertical_from_json/1,
    vertical_to_xml/1,
    vertical_from_xml/1,
    listing_to_json/1,
    listing_from_json/1,
    listing_to_xml/1,
    listing_from_xml/1,
    label_to_json/1,
    label_from_json/1,
    label_to_xml/1,
    label_from_xml/1,
    block_to_json/1,
    block_from_json/1,
    block_to_xml/1,
    block_from_xml/1,
    table_column_to_json/1,
    table_column_from_json/1,
    table_column_to_xml/1,
    table_column_from_xml/1,
    table_to_json/1,
    table_from_json/1,
    table_to_xml/1,
    table_from_xml/1,
    text_edit_to_json/1,
    text_edit_from_json/1,
    text_edit_to_xml/1,
    text_edit_from_xml/1,
    button_to_json/1,
    button_from_json/1,
    button_to_xml/1,
    button_from_xml/1,
    link_to_json/1,
    link_from_json/1,
    link_to_xml/1,
    link_from_xml/1,
    layout_to_json/1,
    layout_from_json/1,
    layout_to_xml/1,
    layout_from_xml/1,
    date_time_picker_to_json/1,
    date_time_picker_from_json/1,
    date_time_picker_to_xml/1,
    date_time_picker_from_xml/1,
    time_interval_to_json/1,
    time_interval_from_json/1,
    time_interval_to_xml/1,
    time_interval_from_xml/1,
    image_to_json/1,
    image_from_json/1,
    image_to_xml/1,
    image_from_xml/1,
    chart_to_json/1,
    chart_from_json/1,
    chart_to_xml/1,
    chart_from_xml/1,
    image_button_to_json/1,
    image_button_from_json/1,
    image_button_to_xml/1,
    image_button_from_xml/1,
    checkbox_to_json/1,
    checkbox_from_json/1,
    checkbox_to_xml/1,
    checkbox_from_xml/1,
    combobox_to_json/1,
    combobox_from_json/1,
    combobox_to_xml/1,
    combobox_from_xml/1,
    inplace_text_edit_to_json/1,
    inplace_text_edit_from_json/1,
    inplace_text_edit_to_xml/1,
    inplace_text_edit_from_xml/1,
    separator_to_json/1,
    separator_from_json/1,
    separator_to_xml/1,
    separator_from_xml/1,
    html_to_json/1,
    html_from_json/1,
    html_to_xml/1,
    html_from_xml/1,
    tab_item_to_json/1,
    tab_item_from_json/1,
    tab_item_to_xml/1,
    tab_item_from_xml/1,
    tabs_to_json/1,
    tabs_from_json/1,
    tabs_to_xml/1,
    tabs_from_xml/1,
    radio_item_to_json/1,
    radio_item_from_json/1,
    radio_item_to_xml/1,
    radio_item_from_xml/1,
    radiogroup_to_json/1,
    radiogroup_from_json/1,
    radiogroup_to_xml/1,
    radiogroup_from_xml/1,
    property_grid_to_json/1,
    property_grid_from_json/1,
    property_grid_to_xml/1,
    property_grid_from_xml/1
]).

-export_type([
    role/0,
    privilege_type/0,
    privilege/0,
    privilege_manage_users/0,
    role_info/0,
    instance/0,
    menu/0,
    menu_item/0,
    page/0,
    search_result/0,
    method/0,
    action_type/0,
    source_type/0,
    text_edit_kind/0,
    date_time_mode/0,
    time_span/0,
    chart_type/0,
    action/0,
    request/0,
    navigate/0,
    reload/0,
    popup/0,
    assign/0,
    element_layout/0,
    element/0,
    element_type/0,
    horizontal/0,
    vertical/0,
    listing/0,
    label/0,
    block/0,
    table_column/0,
    table/0,
    text_edit/0,
    button/0,
    link/0,
    layout/0,
    date_time_picker/0,
    time_interval/0,
    image/0,
    chart/0,
    image_button/0,
    checkbox/0,
    combobox/0,
    inplace_text_edit/0,
    separator/0,
    html/0,
    tab_item/0,
    tabs/0,
    radio_item/0,
    radiogroup/0,
    property_grid/0
]).

-type role() :: atom().
-type privilege_type() :: 'manage_users'.
-type privilege() :: zeus_shared_protocol:privilege_manage_users().
-type privilege_manage_users() :: #privilege_manage_users{}.
-type role_info() :: #role_info{}.
-type instance() :: #instance{}.
-type menu() :: #menu{}.
-type menu_item() :: #menu_item{}.
-type page() :: #page{}.
-type search_result() :: #search_result{}.
-type method() :: 'get' | 'put' | 'post' | 'patch' | 'delete'.
-type action_type() :: 'request' | 'navigate' | 'reload' | 'popup' | 'assign'.
-type source_type() :: 'global' | 'local' | 'instance'.
-type text_edit_kind() :: 'text' | 'number' | 'integer' | 'float'.
-type date_time_mode() :: 'date' | 'time' | 'datetime'.
-type time_span() :: 'seconds' | 'milliseconds'.
-type chart_type() :: 'bar' | 'line' | 'point'.
-type action() :: zeus_shared_protocol:request() | zeus_shared_protocol:navigate() | zeus_shared_protocol:reload() | zeus_shared_protocol:popup() | zeus_shared_protocol:assign().
-type request() :: #request{}.
-type navigate() :: #navigate{}.
-type reload() :: #reload{}.
-type popup() :: #popup{}.
-type assign() :: #assign{}.
-type element_layout() :: #element_layout{}.
-type element() :: zeus_shared_protocol:horizontal() | zeus_shared_protocol:vertical() | zeus_shared_protocol:listing() | zeus_shared_protocol:label() | zeus_shared_protocol:block() | zeus_shared_protocol:table() | zeus_shared_protocol:text_edit() | zeus_shared_protocol:button() | zeus_shared_protocol:link() | zeus_shared_protocol:layout() | zeus_shared_protocol:date_time_picker() | zeus_shared_protocol:time_interval() | zeus_shared_protocol:image() | zeus_shared_protocol:chart() | zeus_shared_protocol:image_button() | zeus_shared_protocol:checkbox() | zeus_shared_protocol:combobox() | zeus_shared_protocol:inplace_text_edit() | zeus_shared_protocol:separator() | zeus_shared_protocol:html() | zeus_shared_protocol:tabs() | zeus_shared_protocol:radiogroup() | zeus_shared_protocol:property_grid().
-type element_type() :: 'horizontal' | 'vertical' | 'listing' | 'label' | 'block' | 'table' | 'textedit' | 'button' | 'link' | 'layout' | 'datetimepicker' | 'timeinterval' | 'image' | 'chart' | 'imagebutton' | 'checkbox' | 'combobox' | 'inplace_textedit' | 'separator' | 'html' | 'tabs' | 'radiogroup' | 'property_grid'.
-type horizontal() :: #horizontal{}.
-type vertical() :: #vertical{}.
-type listing() :: #listing{}.
-type label() :: #label{}.
-type block() :: #block{}.
-type table_column() :: #table_column{}.
-type table() :: #table{}.
-type text_edit() :: #text_edit{}.
-type button() :: #button{}.
-type link() :: #link{}.
-type layout() :: #layout{}.
-type date_time_picker() :: #date_time_picker{}.
-type time_interval() :: #time_interval{}.
-type image() :: #image{}.
-type chart() :: #chart{}.
-type image_button() :: #image_button{}.
-type checkbox() :: #checkbox{}.
-type combobox() :: #combobox{}.
-type inplace_text_edit() :: #inplace_text_edit{}.
-type separator() :: #separator{}.
-type html() :: #html{}.
-type tab_item() :: #tab_item{}.
-type tabs() :: #tabs{}.
-type radio_item() :: #radio_item{}.
-type radiogroup() :: #radiogroup{}.
-type property_grid() :: #property_grid{}.

-spec privilege_type_to_json(privilege_type()) -> igor_json:json_string().

privilege_type_to_json(manage_users) -> <<"manage_users">>.

-spec privilege_type_from_json(igor_json:json()) -> privilege_type().

privilege_type_from_json(<<"manage_users">>) -> manage_users.

-spec privilege_type_to_xml(privilege_type()) -> string().

privilege_type_to_xml(manage_users) -> "manage_users".

-spec privilege_type_from_xml(string()) -> privilege_type().

privilege_type_from_xml("manage_users") -> manage_users.

-spec privilege_to_json(privilege()) -> igor_json:json_object().

privilege_to_json(Record) when is_record(Record, privilege_manage_users) ->
    privilege_manage_users_to_json(Record).

-spec privilege_from_json(igor_json:json_object()) -> privilege().

privilege_from_json(Json) ->
    Tag = igor_json:parse(Json, <<"type">>, {custom, fun zeus_shared_protocol:privilege_type_from_json/1}),
    case Tag of
        manage_users ->
            privilege_manage_users_from_json(Json)
    end.

-spec privilege_from_xml(igor_xml:xml_element()) -> privilege().

privilege_from_xml(XmlElement) ->
    case igor_xml:name(XmlElement) of
        'PrivilegeManageUsers' ->
            privilege_manage_users_from_xml(XmlElement)
    end.

-spec privilege_to_xml(privilege()) -> igor_xml:xml_element().

privilege_to_xml(Record) when is_record(Record, privilege_manage_users) ->
    privilege_manage_users_to_xml(Record).

-spec privilege_manage_users_to_json(privilege_manage_users()) -> igor_json:json_object().

privilege_manage_users_to_json(Record) ->
    #privilege_manage_users{roles = Roles} = Record,
    ?assert(Roles =/= undefined),
    #{
        <<"type">> => igor_json:pack(manage_users, {custom, fun zeus_shared_protocol:privilege_type_to_json/1}),
        <<"roles">> => igor_json:pack(Roles, {list, atom})
    }.

-spec privilege_manage_users_from_json(igor_json:json_object()) -> privilege_manage_users().

privilege_manage_users_from_json(Json) ->
    #privilege_manage_users{
        roles = igor_json:parse(Json, <<"roles">>, {list, atom})
    }.

-spec privilege_manage_users_to_xml(privilege_manage_users()) -> igor_xml:xml_element().

privilege_manage_users_to_xml(Record) ->
    #privilege_manage_users{roles = Roles} = Record,
    ?assert(Roles =/= undefined),
    Content = igor_xml:pack_subelement('Roles', Roles, {list, {element, item, atom}}),
    #xmlElement{name = 'PrivilegeManageUsers', content = Content}.

-spec privilege_manage_users_from_xml(igor_xml:xml_element()) -> privilege_manage_users().

privilege_manage_users_from_xml(XmlElement) ->
    'PrivilegeManageUsers' = igor_xml:name(XmlElement),
    Roles = igor_xml:parse_subelement(XmlElement, 'Roles', {list, {element, item, atom}}),
    #privilege_manage_users{roles = Roles}.

-spec role_info_to_json(role_info()) -> igor_json:json_object().

role_info_to_json(Record) ->
    #role_info{
        role = Role,
        title = Title,
        description = Description,
        privileges = Privileges
    } = Record,
    ?assert(Role =/= undefined),
    ?assert(Title =/= undefined),
    ?assert(Description =/= undefined),
    ?assert(Privileges =/= undefined),
    #{
        <<"role">> => igor_json:pack(Role, atom),
        <<"title">> => igor_json:pack(Title, string),
        <<"description">> => igor_json:pack(Description, string),
        <<"privileges">> => igor_json:pack(Privileges, {list, {custom, fun zeus_shared_protocol:privilege_to_json/1}})
    }.

-spec role_info_from_json(igor_json:json_object()) -> role_info().

role_info_from_json(Json) ->
    #role_info{
        role = igor_json:parse(Json, <<"role">>, atom),
        title = igor_json:parse(Json, <<"title">>, string),
        description = igor_json:parse(Json, <<"description">>, string),
        privileges = igor_json:parse(Json, <<"privileges">>, {list, {custom, fun zeus_shared_protocol:privilege_from_json/1}})
    }.

-spec role_info_to_xml(role_info()) -> igor_xml:xml_element().

role_info_to_xml(Record) ->
    #role_info{
        role = Role,
        title = Title,
        description = Description,
        privileges = Privileges
    } = Record,
    ?assert(Role =/= undefined),
    ?assert(Title =/= undefined),
    ?assert(Description =/= undefined),
    ?assert(Privileges =/= undefined),
    Content = igor_xml:pack_subelement('Role', Role, atom)
    ++ igor_xml:pack_subelement('Title', Title, string)
    ++ igor_xml:pack_subelement('Description', Description, string)
    ++ igor_xml:pack_subelement('Privileges', Privileges, {list, {custom_element, fun zeus_shared_protocol:privilege_to_xml/1}}),
    #xmlElement{name = 'RoleInfo', content = Content}.

-spec role_info_from_xml(igor_xml:xml_element()) -> role_info().

role_info_from_xml(XmlElement) ->
    'RoleInfo' = igor_xml:name(XmlElement),
    Role = igor_xml:parse_subelement(XmlElement, 'Role', atom),
    Title = igor_xml:parse_subelement(XmlElement, 'Title', string),
    Description = igor_xml:parse_subelement(XmlElement, 'Description', string),
    Privileges = igor_xml:parse_subelement(XmlElement, 'Privileges', {list, {custom_element, fun zeus_shared_protocol:privilege_from_xml/1}}),
    #role_info{
        role = Role,
        title = Title,
        description = Description,
        privileges = Privileges
    }.

-spec instance_to_json(instance()) -> igor_json:json_object().

instance_to_json(Record) ->
    #instance{
        key = VarKey,
        title = Title,
        icon = Icon,
        roles = Roles
    } = Record,
    ?assert(VarKey =/= undefined),
    ?assert(Title =/= undefined),
    ?assert(Icon =/= undefined),
    ?assert(Roles =/= undefined),
    #{
        <<"key">> => igor_json:pack(VarKey, string),
        <<"title">> => igor_json:pack(Title, string),
        <<"icon">> => igor_json:pack(Icon, string),
        <<"roles">> => igor_json:pack(Roles, {list, {custom, fun zeus_shared_protocol:role_info_to_json/1}})
    }.

-spec instance_from_json(igor_json:json_object()) -> instance().

instance_from_json(Json) ->
    #instance{
        key = igor_json:parse(Json, <<"key">>, string),
        title = igor_json:parse(Json, <<"title">>, string),
        icon = igor_json:parse(Json, <<"icon">>, string),
        roles = igor_json:parse(Json, <<"roles">>, {list, {custom, fun zeus_shared_protocol:role_info_from_json/1}})
    }.

-spec instance_to_xml(instance()) -> igor_xml:xml_element().

instance_to_xml(Record) ->
    #instance{
        key = VarKey,
        title = Title,
        icon = Icon,
        roles = Roles
    } = Record,
    ?assert(VarKey =/= undefined),
    ?assert(Title =/= undefined),
    ?assert(Icon =/= undefined),
    ?assert(Roles =/= undefined),
    Content = igor_xml:pack_subelement('Key', VarKey, string)
    ++ igor_xml:pack_subelement('Title', Title, string)
    ++ igor_xml:pack_subelement('Icon', Icon, string)
    ++ igor_xml:pack_subelement('Roles', Roles, {list, {custom_element, fun zeus_shared_protocol:role_info_to_xml/1}}),
    #xmlElement{name = 'Instance', content = Content}.

-spec instance_from_xml(igor_xml:xml_element()) -> instance().

instance_from_xml(XmlElement) ->
    'Instance' = igor_xml:name(XmlElement),
    VarKey = igor_xml:parse_subelement(XmlElement, 'Key', string),
    Title = igor_xml:parse_subelement(XmlElement, 'Title', string),
    Icon = igor_xml:parse_subelement(XmlElement, 'Icon', string),
    Roles = igor_xml:parse_subelement(XmlElement, 'Roles', {list, {custom_element, fun zeus_shared_protocol:role_info_from_xml/1}}),
    #instance{
        key = VarKey,
        title = Title,
        icon = Icon,
        roles = Roles
    }.

-spec menu_to_json(menu()) -> igor_json:json_object().

menu_to_json(Record) ->
    #menu{items = Items} = Record,
    ?assert(Items =/= undefined),
    #{
        <<"items">> => igor_json:pack(Items, {list, {custom, fun zeus_shared_protocol:menu_item_to_json/1}})
    }.

-spec menu_from_json(igor_json:json_object()) -> menu().

menu_from_json(Json) ->
    #menu{
        items = igor_json:parse(Json, <<"items">>, {list, {custom, fun zeus_shared_protocol:menu_item_from_json/1}}, [])
    }.

-spec menu_to_xml(menu()) -> igor_xml:xml_element().

menu_to_xml(Record) ->
    #menu{items = Items} = Record,
    ?assert(Items =/= undefined),
    Content = igor_xml:pack_subelement('Items', Items, {list, {custom_element, fun zeus_shared_protocol:menu_item_to_xml/1}}),
    #xmlElement{name = 'Menu', content = Content}.

-spec menu_from_xml(igor_xml:xml_element()) -> menu().

menu_from_xml(XmlElement) ->
    'Menu' = igor_xml:name(XmlElement),
    Items = igor_xml:parse_subelement(XmlElement, 'Items', {list, {custom_element, fun zeus_shared_protocol:menu_item_from_xml/1}}, []),
    #menu{items = Items}.

-spec menu_item_to_json(menu_item()) -> igor_json:json_object().

menu_item_to_json(Record) ->
    #menu_item{route = Route, items = Items} = Record,
    ?assert(Route =/= undefined),
    ?assert(Items =/= undefined),
    #{
        <<"route">> => igor_json:pack(Route, string),
        <<"items">> => igor_json:pack(Items, {list, {custom, fun zeus_shared_protocol:menu_item_to_json/1}})
    }.

-spec menu_item_from_json(igor_json:json_object()) -> menu_item().

menu_item_from_json(Json) ->
    #menu_item{
        route = igor_json:parse(Json, <<"route">>, string),
        items = igor_json:parse(Json, <<"items">>, {list, {custom, fun zeus_shared_protocol:menu_item_from_json/1}}, [])
    }.

-spec menu_item_to_xml(menu_item()) -> igor_xml:xml_element().

menu_item_to_xml(Record) ->
    #menu_item{route = Route, items = Items} = Record,
    ?assert(Route =/= undefined),
    ?assert(Items =/= undefined),
    Content = igor_xml:pack_subelement('Route', Route, string)
    ++ igor_xml:pack_subelement('Items', Items, {list, {custom_element, fun zeus_shared_protocol:menu_item_to_xml/1}}),
    #xmlElement{name = 'MenuItem', content = Content}.

-spec menu_item_from_xml(igor_xml:xml_element()) -> menu_item().

menu_item_from_xml(XmlElement) ->
    'MenuItem' = igor_xml:name(XmlElement),
    Route = igor_xml:parse_subelement(XmlElement, 'Route', string),
    Items = igor_xml:parse_subelement(XmlElement, 'Items', {list, {custom_element, fun zeus_shared_protocol:menu_item_from_xml/1}}, []),
    #menu_item{route = Route, items = Items}.

-spec page_to_json(page()) -> igor_json:json_object().

page_to_json(Record) ->
    #page{
        title = Title,
        icon = Icon,
        layout_url = LayoutUrl,
        data_url = DataUrl,
        is_websocket = IsWebsocket,
        data = Data
    } = Record,
    ?assert(Title =/= undefined),
    ?assert(LayoutUrl =/= undefined),
    ?assert(IsWebsocket =/= undefined),
    #{
        <<"title">> => igor_json:pack(Title, string),
        <<"icon">> => igor_json:pack(Icon, string),
        <<"layout_url">> => igor_json:pack(LayoutUrl, string),
        <<"data_url">> => igor_json:pack(DataUrl, string),
        <<"is_websocket">> => igor_json:pack(IsWebsocket, boolean),
        <<"data">> => igor_json:pack(Data, {custom, fun zeus_igor_custom:identity/1})
    }.

-spec page_from_json(igor_json:json_object()) -> page().

page_from_json(Json) ->
    #page{
        title = igor_json:parse(Json, <<"title">>, string),
        icon = igor_json:parse(Json, <<"icon">>, string, undefined),
        layout_url = igor_json:parse(Json, <<"layout_url">>, string),
        data_url = igor_json:parse(Json, <<"data_url">>, string, undefined),
        is_websocket = igor_json:parse(Json, <<"is_websocket">>, boolean, false),
        data = igor_json:parse(Json, <<"data">>, {custom, fun zeus_igor_custom:identity/1}, undefined)
    }.

-spec page_to_xml(page()) -> igor_xml:xml_element().

page_to_xml(Record) ->
    #page{
        title = Title,
        icon = Icon,
        layout_url = LayoutUrl,
        data_url = DataUrl,
        is_websocket = IsWebsocket,
        data = Data
    } = Record,
    ?assert(Title =/= undefined),
    ?assert(LayoutUrl =/= undefined),
    ?assert(IsWebsocket =/= undefined),
    Content = igor_xml:pack_subelement('Title', Title, string)
    ++ igor_xml:pack_subelement('Icon', Icon, {option, string})
    ++ igor_xml:pack_subelement('LayoutUrl', LayoutUrl, string)
    ++ igor_xml:pack_subelement('DataUrl', DataUrl, {option, string})
    ++ igor_xml:pack_subelement('IsWebsocket', IsWebsocket, boolean)
    ++ igor_xml:pack_subelement('Data', Data, {option, {custom_element, fun zeus_igor_custom:json_to_xml/1}}),
    #xmlElement{name = 'Page', content = Content}.

-spec page_from_xml(igor_xml:xml_element()) -> page().

page_from_xml(XmlElement) ->
    'Page' = igor_xml:name(XmlElement),
    Title = igor_xml:parse_subelement(XmlElement, 'Title', string),
    Icon = igor_xml:parse_subelement(XmlElement, 'Icon', string, undefined),
    LayoutUrl = igor_xml:parse_subelement(XmlElement, 'LayoutUrl', string),
    DataUrl = igor_xml:parse_subelement(XmlElement, 'DataUrl', string, undefined),
    IsWebsocket = igor_xml:parse_subelement(XmlElement, 'IsWebsocket', boolean, false),
    Data = igor_xml:parse_subelement(XmlElement, 'Data', {custom_element, fun zeus_igor_custom:json_from_xml/1}, undefined),
    #page{
        title = Title,
        icon = Icon,
        layout_url = LayoutUrl,
        data_url = DataUrl,
        is_websocket = IsWebsocket,
        data = Data
    }.

-spec search_result_to_json(search_result()) -> igor_json:json_object().

search_result_to_json(Record) ->
    #search_result{route = Route} = Record,
    ?assert(Route =/= undefined),
    #{
        <<"route">> => igor_json:pack(Route, string)
    }.

-spec search_result_from_json(igor_json:json_object()) -> search_result().

search_result_from_json(Json) ->
    #search_result{
        route = igor_json:parse(Json, <<"route">>, string)
    }.

-spec search_result_to_xml(search_result()) -> igor_xml:xml_element().

search_result_to_xml(Record) ->
    #search_result{route = Route} = Record,
    ?assert(Route =/= undefined),
    Content = igor_xml:pack_subelement('Route', Route, string),
    #xmlElement{name = 'SearchResult', content = Content}.

-spec search_result_from_xml(igor_xml:xml_element()) -> search_result().

search_result_from_xml(XmlElement) ->
    'SearchResult' = igor_xml:name(XmlElement),
    Route = igor_xml:parse_subelement(XmlElement, 'Route', string),
    #search_result{route = Route}.

-spec method_to_json(method()) -> igor_json:json_string().

method_to_json(get) -> <<"get">>;
method_to_json(put) -> <<"put">>;
method_to_json(post) -> <<"post">>;
method_to_json(patch) -> <<"patch">>;
method_to_json(delete) -> <<"delete">>.

-spec method_from_json(igor_json:json()) -> method().

method_from_json(<<"get">>) -> get;
method_from_json(<<"put">>) -> put;
method_from_json(<<"post">>) -> post;
method_from_json(<<"patch">>) -> patch;
method_from_json(<<"delete">>) -> delete.

-spec method_to_xml(method()) -> string().

method_to_xml(get) -> "get";
method_to_xml(put) -> "put";
method_to_xml(post) -> "post";
method_to_xml(patch) -> "patch";
method_to_xml(delete) -> "delete".

-spec method_from_xml(string()) -> method().

method_from_xml("get") -> get;
method_from_xml("put") -> put;
method_from_xml("post") -> post;
method_from_xml("patch") -> patch;
method_from_xml("delete") -> delete.

-spec action_type_to_json(action_type()) -> igor_json:json_string().

action_type_to_json(request) -> <<"request">>;
action_type_to_json(navigate) -> <<"navigate">>;
action_type_to_json(reload) -> <<"reload">>;
action_type_to_json(popup) -> <<"popup">>;
action_type_to_json(assign) -> <<"assign">>.

-spec action_type_from_json(igor_json:json()) -> action_type().

action_type_from_json(<<"request">>) -> request;
action_type_from_json(<<"navigate">>) -> navigate;
action_type_from_json(<<"reload">>) -> reload;
action_type_from_json(<<"popup">>) -> popup;
action_type_from_json(<<"assign">>) -> assign.

-spec action_type_to_xml(action_type()) -> string().

action_type_to_xml(request) -> "request";
action_type_to_xml(navigate) -> "navigate";
action_type_to_xml(reload) -> "reload";
action_type_to_xml(popup) -> "popup";
action_type_to_xml(assign) -> "assign".

-spec action_type_from_xml(string()) -> action_type().

action_type_from_xml("request") -> request;
action_type_from_xml("navigate") -> navigate;
action_type_from_xml("reload") -> reload;
action_type_from_xml("popup") -> popup;
action_type_from_xml("assign") -> assign.

-spec source_type_to_json(source_type()) -> igor_json:json_string().

source_type_to_json(global) -> <<"global">>;
source_type_to_json(local) -> <<"local">>;
source_type_to_json(instance) -> <<"instance">>.

-spec source_type_from_json(igor_json:json()) -> source_type().

source_type_from_json(<<"global">>) -> global;
source_type_from_json(<<"local">>) -> local;
source_type_from_json(<<"instance">>) -> instance.

-spec source_type_to_xml(source_type()) -> string().

source_type_to_xml(global) -> "global";
source_type_to_xml(local) -> "local";
source_type_to_xml(instance) -> "instance".

-spec source_type_from_xml(string()) -> source_type().

source_type_from_xml("global") -> global;
source_type_from_xml("local") -> local;
source_type_from_xml("instance") -> instance.

-spec text_edit_kind_to_json(text_edit_kind()) -> igor_json:json_string().

text_edit_kind_to_json(text) -> <<"text">>;
text_edit_kind_to_json(number) -> <<"number">>;
text_edit_kind_to_json(integer) -> <<"integer">>;
text_edit_kind_to_json(float) -> <<"float">>.

-spec text_edit_kind_from_json(igor_json:json()) -> text_edit_kind().

text_edit_kind_from_json(<<"text">>) -> text;
text_edit_kind_from_json(<<"number">>) -> number;
text_edit_kind_from_json(<<"integer">>) -> integer;
text_edit_kind_from_json(<<"float">>) -> float.

-spec text_edit_kind_to_xml(text_edit_kind()) -> string().

text_edit_kind_to_xml(text) -> "text";
text_edit_kind_to_xml(number) -> "number";
text_edit_kind_to_xml(integer) -> "integer";
text_edit_kind_to_xml(float) -> "float".

-spec text_edit_kind_from_xml(string()) -> text_edit_kind().

text_edit_kind_from_xml("text") -> text;
text_edit_kind_from_xml("number") -> number;
text_edit_kind_from_xml("integer") -> integer;
text_edit_kind_from_xml("float") -> float.

-spec date_time_mode_to_json(date_time_mode()) -> igor_json:json_string().

date_time_mode_to_json(date) -> <<"date">>;
date_time_mode_to_json(time) -> <<"time">>;
date_time_mode_to_json(datetime) -> <<"datetime">>.

-spec date_time_mode_from_json(igor_json:json()) -> date_time_mode().

date_time_mode_from_json(<<"date">>) -> date;
date_time_mode_from_json(<<"time">>) -> time;
date_time_mode_from_json(<<"datetime">>) -> datetime.

-spec date_time_mode_to_xml(date_time_mode()) -> string().

date_time_mode_to_xml(date) -> "date";
date_time_mode_to_xml(time) -> "time";
date_time_mode_to_xml(datetime) -> "datetime".

-spec date_time_mode_from_xml(string()) -> date_time_mode().

date_time_mode_from_xml("date") -> date;
date_time_mode_from_xml("time") -> time;
date_time_mode_from_xml("datetime") -> datetime.

-spec time_span_to_json(time_span()) -> igor_json:json_string().

time_span_to_json(seconds) -> <<"seconds">>;
time_span_to_json(milliseconds) -> <<"milliseconds">>.

-spec time_span_from_json(igor_json:json()) -> time_span().

time_span_from_json(<<"seconds">>) -> seconds;
time_span_from_json(<<"milliseconds">>) -> milliseconds.

-spec time_span_to_xml(time_span()) -> string().

time_span_to_xml(seconds) -> "seconds";
time_span_to_xml(milliseconds) -> "milliseconds".

-spec time_span_from_xml(string()) -> time_span().

time_span_from_xml("seconds") -> seconds;
time_span_from_xml("milliseconds") -> milliseconds.

-spec chart_type_to_json(chart_type()) -> igor_json:json_string().

chart_type_to_json(bar) -> <<"bar">>;
chart_type_to_json(line) -> <<"line">>;
chart_type_to_json(point) -> <<"point">>.

-spec chart_type_from_json(igor_json:json()) -> chart_type().

chart_type_from_json(<<"bar">>) -> bar;
chart_type_from_json(<<"line">>) -> line;
chart_type_from_json(<<"point">>) -> point.

-spec chart_type_to_xml(chart_type()) -> string().

chart_type_to_xml(bar) -> "bar";
chart_type_to_xml(line) -> "line";
chart_type_to_xml(point) -> "point".

-spec chart_type_from_xml(string()) -> chart_type().

chart_type_from_xml("bar") -> bar;
chart_type_from_xml("line") -> line;
chart_type_from_xml("point") -> point.

-spec action_to_json(action()) -> igor_json:json_object().

action_to_json(Record) when is_record(Record, request) ->
    request_to_json(Record);
action_to_json(Record) when is_record(Record, navigate) ->
    navigate_to_json(Record);
action_to_json(Record) when is_record(Record, reload) ->
    reload_to_json(Record);
action_to_json(Record) when is_record(Record, popup) ->
    popup_to_json(Record);
action_to_json(Record) when is_record(Record, assign) ->
    assign_to_json(Record).

-spec action_from_json(igor_json:json_object()) -> action().

action_from_json(Json) ->
    Tag = igor_json:parse(Json, <<"type">>, {custom, fun zeus_shared_protocol:action_type_from_json/1}),
    case Tag of
        request ->
            request_from_json(Json);
        navigate ->
            navigate_from_json(Json);
        reload ->
            reload_from_json(Json);
        popup ->
            popup_from_json(Json);
        assign ->
            assign_from_json(Json)
    end.

-spec action_from_xml(igor_xml:xml_element()) -> action().

action_from_xml(XmlElement) ->
    case igor_xml:name(XmlElement) of
        'Request' ->
            request_from_xml(XmlElement);
        'Navigate' ->
            navigate_from_xml(XmlElement);
        'Reload' ->
            reload_from_xml(XmlElement);
        'Popup' ->
            popup_from_xml(XmlElement);
        'Assign' ->
            assign_from_xml(XmlElement)
    end.

-spec action_to_xml(action()) -> igor_xml:xml_element().

action_to_xml(Record) when is_record(Record, request) ->
    request_to_xml(Record);
action_to_xml(Record) when is_record(Record, navigate) ->
    navigate_to_xml(Record);
action_to_xml(Record) when is_record(Record, reload) ->
    reload_to_xml(Record);
action_to_xml(Record) when is_record(Record, popup) ->
    popup_to_xml(Record);
action_to_xml(Record) when is_record(Record, assign) ->
    assign_to_xml(Record).

-spec request_to_json(request()) -> igor_json:json_object().

request_to_json(Record) ->
    #request{
        enabled = Enabled,
        method = Method,
        data_url = DataUrl,
        args = Args,
        body = Body,
        result = VarResult,
        on_complete = OnComplete
    } = Record,
    ?assert(Method =/= undefined),
    ?assert(DataUrl =/= undefined),
    ?assert(Args =/= undefined),
    #{
        <<"type">> => igor_json:pack(request, {custom, fun zeus_shared_protocol:action_type_to_json/1}),
        <<"enabled">> => igor_json:pack(Enabled, {custom, fun zeus_igor_custom:binding_to_json/1}),
        <<"method">> => igor_json:pack(Method, {custom, fun zeus_shared_protocol:method_to_json/1}),
        <<"data_url">> => igor_json:pack(DataUrl, string),
        <<"args">> => igor_json:pack(Args, {dict, string, {custom, fun zeus_igor_custom:binding_to_json/1}}),
        <<"body">> => igor_json:pack(Body, {custom, fun zeus_igor_custom:json_binding_to_json/1}),
        <<"result">> => igor_json:pack(VarResult, {custom, fun zeus_igor_custom:binding_to_json/1}),
        <<"on_complete">> => igor_json:pack(OnComplete, {custom, fun zeus_shared_protocol:action_to_json/1})
    }.

-spec request_from_json(igor_json:json_object()) -> request().

request_from_json(Json) ->
    #request{
        enabled = igor_json:parse(Json, <<"enabled">>, {custom, fun zeus_igor_custom:binding_from_json/1}, undefined),
        method = igor_json:parse(Json, <<"method">>, {custom, fun zeus_shared_protocol:method_from_json/1}, get),
        data_url = igor_json:parse(Json, <<"data_url">>, string),
        args = igor_json:parse(Json, <<"args">>, {dict, string, {custom, fun zeus_igor_custom:binding_from_json/1}}, []),
        body = igor_json:parse(Json, <<"body">>, {custom, fun zeus_igor_custom:json_binding_from_json/1}, undefined),
        result = igor_json:parse(Json, <<"result">>, {custom, fun zeus_igor_custom:binding_from_json/1}, undefined),
        on_complete = igor_json:parse(Json, <<"on_complete">>, {custom, fun zeus_shared_protocol:action_from_json/1}, undefined)
    }.

-spec request_to_xml(request()) -> igor_xml:xml_element().

request_to_xml(Record) ->
    #request{
        enabled = Enabled,
        method = Method,
        data_url = DataUrl,
        args = Args,
        body = Body,
        result = VarResult,
        on_complete = OnComplete
    } = Record,
    ?assert(Method =/= undefined),
    ?assert(DataUrl =/= undefined),
    ?assert(Args =/= undefined),
    Content = igor_xml:pack_subelement('Enabled', Enabled, {option, {custom_element, fun zeus_igor_custom:binding_to_xml/1}})
    ++ igor_xml:pack_subelement('Method', Method, {custom_simple_type, fun zeus_shared_protocol:method_to_xml/1})
    ++ igor_xml:pack_subelement('DataUrl', DataUrl, string)
    ++ igor_xml:pack_subelement('Args', Args, {list, {element, item, {pair, {subelement, key, string}, {subelement, value, {custom_element, fun zeus_igor_custom:binding_to_xml/1}}}}})
    ++ igor_xml:pack_subelement('Body', Body, {option, {custom_element, fun zeus_igor_custom:json_binding_to_xml/1}})
    ++ igor_xml:pack_subelement('Result', VarResult, {option, {custom_element, fun zeus_igor_custom:binding_to_xml/1}})
    ++ igor_xml:pack_subelement('OnComplete', OnComplete, {option, {custom_element, fun zeus_shared_protocol:action_to_xml/1}}),
    #xmlElement{name = 'Request', content = Content}.

-spec request_from_xml(igor_xml:xml_element()) -> request().

request_from_xml(XmlElement) ->
    'Request' = igor_xml:name(XmlElement),
    Enabled = igor_xml:parse_subelement(XmlElement, 'Enabled', {custom_element, fun zeus_igor_custom:binding_from_xml/1}, undefined),
    Method = igor_xml:parse_subelement(XmlElement, 'Method', {custom_simple_type, fun zeus_shared_protocol:method_from_xml/1}, get),
    DataUrl = igor_xml:parse_subelement(XmlElement, 'DataUrl', string),
    Args = igor_xml:parse_subelement(XmlElement, 'Args', {list, {element, item, {pair, {subelement, key, string}, {subelement, value, {custom_element, fun zeus_igor_custom:binding_from_xml/1}}}}}, []),
    Body = igor_xml:parse_subelement(XmlElement, 'Body', {custom_element, fun zeus_igor_custom:json_binding_from_xml/1}, undefined),
    VarResult = igor_xml:parse_subelement(XmlElement, 'Result', {custom_element, fun zeus_igor_custom:binding_from_xml/1}, undefined),
    OnComplete = igor_xml:parse_subelement(XmlElement, 'OnComplete', {custom_element, fun zeus_shared_protocol:action_from_xml/1}, undefined),
    #request{
        enabled = Enabled,
        method = Method,
        data_url = DataUrl,
        args = Args,
        body = Body,
        result = VarResult,
        on_complete = OnComplete
    }.

-spec navigate_to_json(navigate()) -> igor_json:json_object().

navigate_to_json(Record) ->
    #navigate{enabled = Enabled, route = Route} = Record,
    ?assert(Route =/= undefined),
    #{
        <<"type">> => igor_json:pack(navigate, {custom, fun zeus_shared_protocol:action_type_to_json/1}),
        <<"enabled">> => igor_json:pack(Enabled, {custom, fun zeus_igor_custom:binding_to_json/1}),
        <<"route">> => igor_json:pack(Route, string)
    }.

-spec navigate_from_json(igor_json:json_object()) -> navigate().

navigate_from_json(Json) ->
    #navigate{
        enabled = igor_json:parse(Json, <<"enabled">>, {custom, fun zeus_igor_custom:binding_from_json/1}, undefined),
        route = igor_json:parse(Json, <<"route">>, string)
    }.

-spec navigate_to_xml(navigate()) -> igor_xml:xml_element().

navigate_to_xml(Record) ->
    #navigate{enabled = Enabled, route = Route} = Record,
    ?assert(Route =/= undefined),
    Content = igor_xml:pack_subelement('Enabled', Enabled, {option, {custom_element, fun zeus_igor_custom:binding_to_xml/1}})
    ++ igor_xml:pack_subelement('Route', Route, string),
    #xmlElement{name = 'Navigate', content = Content}.

-spec navigate_from_xml(igor_xml:xml_element()) -> navigate().

navigate_from_xml(XmlElement) ->
    'Navigate' = igor_xml:name(XmlElement),
    Enabled = igor_xml:parse_subelement(XmlElement, 'Enabled', {custom_element, fun zeus_igor_custom:binding_from_xml/1}, undefined),
    Route = igor_xml:parse_subelement(XmlElement, 'Route', string),
    #navigate{enabled = Enabled, route = Route}.

-spec reload_to_json(reload()) -> igor_json:json_object().

reload_to_json(Record) ->
    #reload{enabled = Enabled} = Record,
    #{
        <<"type">> => igor_json:pack(reload, {custom, fun zeus_shared_protocol:action_type_to_json/1}),
        <<"enabled">> => igor_json:pack(Enabled, {custom, fun zeus_igor_custom:binding_to_json/1})
    }.

-spec reload_from_json(igor_json:json_object()) -> reload().

reload_from_json(Json) ->
    #reload{
        enabled = igor_json:parse(Json, <<"enabled">>, {custom, fun zeus_igor_custom:binding_from_json/1}, undefined)
    }.

-spec reload_to_xml(reload()) -> igor_xml:xml_element().

reload_to_xml(Record) ->
    #reload{enabled = Enabled} = Record,
    Content = igor_xml:pack_subelement('Enabled', Enabled, {option, {custom_element, fun zeus_igor_custom:binding_to_xml/1}}),
    #xmlElement{name = 'Reload', content = Content}.

-spec reload_from_xml(igor_xml:xml_element()) -> reload().

reload_from_xml(XmlElement) ->
    'Reload' = igor_xml:name(XmlElement),
    Enabled = igor_xml:parse_subelement(XmlElement, 'Enabled', {custom_element, fun zeus_igor_custom:binding_from_xml/1}, undefined),
    #reload{enabled = Enabled}.

-spec popup_to_json(popup()) -> igor_json:json_object().

popup_to_json(Record) ->
    #popup{
        enabled = Enabled,
        layout_url = LayoutUrl,
        content_template = ContentTemplate,
        data_url = DataUrl,
        content = VarContent,
        is_context = IsContext,
        width = Width
    } = Record,
    ?assert(IsContext =/= undefined),
    #{
        <<"type">> => igor_json:pack(popup, {custom, fun zeus_shared_protocol:action_type_to_json/1}),
        <<"enabled">> => igor_json:pack(Enabled, {custom, fun zeus_igor_custom:binding_to_json/1}),
        <<"layout_url">> => igor_json:pack(LayoutUrl, string),
        <<"content_template">> => igor_json:pack(ContentTemplate, {custom, fun zeus_shared_protocol:element_to_json/1}),
        <<"data_url">> => igor_json:pack(DataUrl, string),
        <<"content">> => igor_json:pack(VarContent, {custom, fun zeus_igor_custom:binding_to_json/1}),
        <<"is_context">> => igor_json:pack(IsContext, boolean),
        <<"width">> => igor_json:pack(Width, int)
    }.

-spec popup_from_json(igor_json:json_object()) -> popup().

popup_from_json(Json) ->
    #popup{
        enabled = igor_json:parse(Json, <<"enabled">>, {custom, fun zeus_igor_custom:binding_from_json/1}, undefined),
        layout_url = igor_json:parse(Json, <<"layout_url">>, string, undefined),
        content_template = igor_json:parse(Json, <<"content_template">>, {custom, fun zeus_shared_protocol:element_from_json/1}, undefined),
        data_url = igor_json:parse(Json, <<"data_url">>, string, undefined),
        content = igor_json:parse(Json, <<"content">>, {custom, fun zeus_igor_custom:binding_from_json/1}, undefined),
        is_context = igor_json:parse(Json, <<"is_context">>, boolean, true),
        width = igor_json:parse(Json, <<"width">>, int, undefined)
    }.

-spec popup_to_xml(popup()) -> igor_xml:xml_element().

popup_to_xml(Record) ->
    #popup{
        enabled = Enabled,
        layout_url = LayoutUrl,
        content_template = ContentTemplate,
        data_url = DataUrl,
        content = VarContent,
        is_context = IsContext,
        width = Width
    } = Record,
    ?assert(IsContext =/= undefined),
    Content = igor_xml:pack_subelement('Enabled', Enabled, {option, {custom_element, fun zeus_igor_custom:binding_to_xml/1}})
    ++ igor_xml:pack_subelement('LayoutUrl', LayoutUrl, {option, string})
    ++ igor_xml:pack_content(ContentTemplate, {option, {custom_element, fun zeus_shared_protocol:element_to_xml/1}})
    ++ igor_xml:pack_subelement('DataUrl', DataUrl, {option, string})
    ++ igor_xml:pack_subelement('Content', VarContent, {option, {custom_element, fun zeus_igor_custom:binding_to_xml/1}})
    ++ igor_xml:pack_subelement('IsContext', IsContext, boolean)
    ++ igor_xml:pack_subelement('Width', Width, {option, int}),
    #xmlElement{name = 'Popup', content = Content}.

-spec popup_from_xml(igor_xml:xml_element()) -> popup().

popup_from_xml(XmlElement) ->
    'Popup' = igor_xml:name(XmlElement),
    Enabled = igor_xml:parse_subelement(XmlElement, 'Enabled', {custom_element, fun zeus_igor_custom:binding_from_xml/1}, undefined),
    LayoutUrl = igor_xml:parse_subelement(XmlElement, 'LayoutUrl', string, undefined),
    ContentTemplate = igor_xml:parse_content(igor_xml:content(XmlElement), {custom_element, fun zeus_shared_protocol:element_from_xml/1}, undefined),
    DataUrl = igor_xml:parse_subelement(XmlElement, 'DataUrl', string, undefined),
    VarContent = igor_xml:parse_subelement(XmlElement, 'Content', {custom_element, fun zeus_igor_custom:binding_from_xml/1}, undefined),
    IsContext = igor_xml:parse_subelement(XmlElement, 'IsContext', boolean, true),
    Width = igor_xml:parse_subelement(XmlElement, 'Width', int, undefined),
    #popup{
        enabled = Enabled,
        layout_url = LayoutUrl,
        content_template = ContentTemplate,
        data_url = DataUrl,
        content = VarContent,
        is_context = IsContext,
        width = Width
    }.

-spec assign_to_json(assign()) -> igor_json:json_object().

assign_to_json(Record) ->
    #assign{enabled = Enabled, path = Path, value = VarValue} = Record,
    ?assert(Path =/= undefined),
    ?assert(VarValue =/= undefined),
    #{
        <<"type">> => igor_json:pack(assign, {custom, fun zeus_shared_protocol:action_type_to_json/1}),
        <<"enabled">> => igor_json:pack(Enabled, {custom, fun zeus_igor_custom:binding_to_json/1}),
        <<"path">> => igor_json:pack(Path, {custom, fun zeus_igor_custom:binding_to_json/1}),
        <<"value">> => igor_json:pack(VarValue, {custom, fun zeus_igor_custom:binding_to_json/1})
    }.

-spec assign_from_json(igor_json:json_object()) -> assign().

assign_from_json(Json) ->
    #assign{
        enabled = igor_json:parse(Json, <<"enabled">>, {custom, fun zeus_igor_custom:binding_from_json/1}, undefined),
        path = igor_json:parse(Json, <<"path">>, {custom, fun zeus_igor_custom:binding_from_json/1}),
        value = igor_json:parse(Json, <<"value">>, {custom, fun zeus_igor_custom:binding_from_json/1})
    }.

-spec assign_to_xml(assign()) -> igor_xml:xml_element().

assign_to_xml(Record) ->
    #assign{enabled = Enabled, path = Path, value = VarValue} = Record,
    ?assert(Path =/= undefined),
    ?assert(VarValue =/= undefined),
    Content = igor_xml:pack_subelement('Enabled', Enabled, {option, {custom_element, fun zeus_igor_custom:binding_to_xml/1}})
    ++ igor_xml:pack_subelement('Path', Path, {custom_element, fun zeus_igor_custom:binding_to_xml/1})
    ++ igor_xml:pack_subelement('Value', VarValue, {custom_element, fun zeus_igor_custom:binding_to_xml/1}),
    #xmlElement{name = 'Assign', content = Content}.

-spec assign_from_xml(igor_xml:xml_element()) -> assign().

assign_from_xml(XmlElement) ->
    'Assign' = igor_xml:name(XmlElement),
    Enabled = igor_xml:parse_subelement(XmlElement, 'Enabled', {custom_element, fun zeus_igor_custom:binding_from_xml/1}, undefined),
    Path = igor_xml:parse_subelement(XmlElement, 'Path', {custom_element, fun zeus_igor_custom:binding_from_xml/1}),
    VarValue = igor_xml:parse_subelement(XmlElement, 'Value', {custom_element, fun zeus_igor_custom:binding_from_xml/1}),
    #assign{enabled = Enabled, path = Path, value = VarValue}.

-spec element_layout_to_json(element_layout()) -> igor_json:json_object().

element_layout_to_json(Record) ->
    #element_layout{element = Element} = Record,
    #{
        <<"element">> => igor_json:pack(Element, {custom, fun zeus_shared_protocol:element_to_json/1})
    }.

-spec element_layout_from_json(igor_json:json_object()) -> element_layout().

element_layout_from_json(Json) ->
    #element_layout{
        element = igor_json:parse(Json, <<"element">>, {custom, fun zeus_shared_protocol:element_from_json/1}, undefined)
    }.

-spec element_layout_to_xml(element_layout()) -> igor_xml:xml_element().

element_layout_to_xml(Record) ->
    #element_layout{element = Element} = Record,
    Content = igor_xml:pack_content(Element, {option, {custom_element, fun zeus_shared_protocol:element_to_xml/1}}),
    #xmlElement{name = 'ElementLayout', content = Content}.

-spec element_layout_from_xml(igor_xml:xml_element()) -> element_layout().

element_layout_from_xml(XmlElement) ->
    'ElementLayout' = igor_xml:name(XmlElement),
    Element = igor_xml:parse_content(igor_xml:content(XmlElement), {custom_element, fun zeus_shared_protocol:element_from_xml/1}, undefined),
    #element_layout{element = Element}.

-spec element_to_json(element()) -> igor_json:json_object().

element_to_json(Record) when is_record(Record, horizontal) ->
    horizontal_to_json(Record);
element_to_json(Record) when is_record(Record, vertical) ->
    vertical_to_json(Record);
element_to_json(Record) when is_record(Record, listing) ->
    listing_to_json(Record);
element_to_json(Record) when is_record(Record, label) ->
    label_to_json(Record);
element_to_json(Record) when is_record(Record, block) ->
    block_to_json(Record);
element_to_json(Record) when is_record(Record, table) ->
    table_to_json(Record);
element_to_json(Record) when is_record(Record, text_edit) ->
    text_edit_to_json(Record);
element_to_json(Record) when is_record(Record, button) ->
    button_to_json(Record);
element_to_json(Record) when is_record(Record, link) ->
    link_to_json(Record);
element_to_json(Record) when is_record(Record, layout) ->
    layout_to_json(Record);
element_to_json(Record) when is_record(Record, date_time_picker) ->
    date_time_picker_to_json(Record);
element_to_json(Record) when is_record(Record, time_interval) ->
    time_interval_to_json(Record);
element_to_json(Record) when is_record(Record, image) ->
    image_to_json(Record);
element_to_json(Record) when is_record(Record, chart) ->
    chart_to_json(Record);
element_to_json(Record) when is_record(Record, image_button) ->
    image_button_to_json(Record);
element_to_json(Record) when is_record(Record, checkbox) ->
    checkbox_to_json(Record);
element_to_json(Record) when is_record(Record, combobox) ->
    combobox_to_json(Record);
element_to_json(Record) when is_record(Record, inplace_text_edit) ->
    inplace_text_edit_to_json(Record);
element_to_json(Record) when is_record(Record, separator) ->
    separator_to_json(Record);
element_to_json(Record) when is_record(Record, html) ->
    html_to_json(Record);
element_to_json(Record) when is_record(Record, tabs) ->
    tabs_to_json(Record);
element_to_json(Record) when is_record(Record, radiogroup) ->
    radiogroup_to_json(Record);
element_to_json(Record) when is_record(Record, property_grid) ->
    property_grid_to_json(Record).

-spec element_from_json(igor_json:json_object()) -> element().

element_from_json(Json) ->
    Tag = igor_json:parse(Json, <<"type">>, {custom, fun zeus_shared_protocol:element_type_from_json/1}),
    case Tag of
        horizontal ->
            horizontal_from_json(Json);
        vertical ->
            vertical_from_json(Json);
        listing ->
            listing_from_json(Json);
        label ->
            label_from_json(Json);
        block ->
            block_from_json(Json);
        table ->
            table_from_json(Json);
        textedit ->
            text_edit_from_json(Json);
        button ->
            button_from_json(Json);
        link ->
            link_from_json(Json);
        layout ->
            layout_from_json(Json);
        datetimepicker ->
            date_time_picker_from_json(Json);
        timeinterval ->
            time_interval_from_json(Json);
        image ->
            image_from_json(Json);
        chart ->
            chart_from_json(Json);
        imagebutton ->
            image_button_from_json(Json);
        checkbox ->
            checkbox_from_json(Json);
        combobox ->
            combobox_from_json(Json);
        inplace_textedit ->
            inplace_text_edit_from_json(Json);
        separator ->
            separator_from_json(Json);
        html ->
            html_from_json(Json);
        tabs ->
            tabs_from_json(Json);
        radiogroup ->
            radiogroup_from_json(Json);
        property_grid ->
            property_grid_from_json(Json)
    end.

-spec element_from_xml(igor_xml:xml_element()) -> element().

element_from_xml(XmlElement) ->
    case igor_xml:name(XmlElement) of
        'Horizontal' ->
            horizontal_from_xml(XmlElement);
        'Vertical' ->
            vertical_from_xml(XmlElement);
        'Listing' ->
            listing_from_xml(XmlElement);
        'Label' ->
            label_from_xml(XmlElement);
        'Block' ->
            block_from_xml(XmlElement);
        'Table' ->
            table_from_xml(XmlElement);
        'TextEdit' ->
            text_edit_from_xml(XmlElement);
        'Button' ->
            button_from_xml(XmlElement);
        'Link' ->
            link_from_xml(XmlElement);
        'Layout' ->
            layout_from_xml(XmlElement);
        'DateTimePicker' ->
            date_time_picker_from_xml(XmlElement);
        'TimeInterval' ->
            time_interval_from_xml(XmlElement);
        'Image' ->
            image_from_xml(XmlElement);
        'Chart' ->
            chart_from_xml(XmlElement);
        'ImageButton' ->
            image_button_from_xml(XmlElement);
        'Checkbox' ->
            checkbox_from_xml(XmlElement);
        'Combobox' ->
            combobox_from_xml(XmlElement);
        'InplaceTextEdit' ->
            inplace_text_edit_from_xml(XmlElement);
        'Separator' ->
            separator_from_xml(XmlElement);
        'Html' ->
            html_from_xml(XmlElement);
        'Tabs' ->
            tabs_from_xml(XmlElement);
        'Radiogroup' ->
            radiogroup_from_xml(XmlElement);
        'PropertyGrid' ->
            property_grid_from_xml(XmlElement)
    end.

-spec element_to_xml(element()) -> igor_xml:xml_element().

element_to_xml(Record) when is_record(Record, horizontal) ->
    horizontal_to_xml(Record);
element_to_xml(Record) when is_record(Record, vertical) ->
    vertical_to_xml(Record);
element_to_xml(Record) when is_record(Record, listing) ->
    listing_to_xml(Record);
element_to_xml(Record) when is_record(Record, label) ->
    label_to_xml(Record);
element_to_xml(Record) when is_record(Record, block) ->
    block_to_xml(Record);
element_to_xml(Record) when is_record(Record, table) ->
    table_to_xml(Record);
element_to_xml(Record) when is_record(Record, text_edit) ->
    text_edit_to_xml(Record);
element_to_xml(Record) when is_record(Record, button) ->
    button_to_xml(Record);
element_to_xml(Record) when is_record(Record, link) ->
    link_to_xml(Record);
element_to_xml(Record) when is_record(Record, layout) ->
    layout_to_xml(Record);
element_to_xml(Record) when is_record(Record, date_time_picker) ->
    date_time_picker_to_xml(Record);
element_to_xml(Record) when is_record(Record, time_interval) ->
    time_interval_to_xml(Record);
element_to_xml(Record) when is_record(Record, image) ->
    image_to_xml(Record);
element_to_xml(Record) when is_record(Record, chart) ->
    chart_to_xml(Record);
element_to_xml(Record) when is_record(Record, image_button) ->
    image_button_to_xml(Record);
element_to_xml(Record) when is_record(Record, checkbox) ->
    checkbox_to_xml(Record);
element_to_xml(Record) when is_record(Record, combobox) ->
    combobox_to_xml(Record);
element_to_xml(Record) when is_record(Record, inplace_text_edit) ->
    inplace_text_edit_to_xml(Record);
element_to_xml(Record) when is_record(Record, separator) ->
    separator_to_xml(Record);
element_to_xml(Record) when is_record(Record, html) ->
    html_to_xml(Record);
element_to_xml(Record) when is_record(Record, tabs) ->
    tabs_to_xml(Record);
element_to_xml(Record) when is_record(Record, radiogroup) ->
    radiogroup_to_xml(Record);
element_to_xml(Record) when is_record(Record, property_grid) ->
    property_grid_to_xml(Record).

-spec element_type_to_json(element_type()) -> igor_json:json_string().

element_type_to_json(horizontal) -> <<"horizontal">>;
element_type_to_json(vertical) -> <<"vertical">>;
element_type_to_json(listing) -> <<"listing">>;
element_type_to_json(label) -> <<"label">>;
element_type_to_json(block) -> <<"block">>;
element_type_to_json(table) -> <<"table">>;
element_type_to_json(textedit) -> <<"textedit">>;
element_type_to_json(button) -> <<"button">>;
element_type_to_json(link) -> <<"link">>;
element_type_to_json(layout) -> <<"layout">>;
element_type_to_json(datetimepicker) -> <<"datetimepicker">>;
element_type_to_json(timeinterval) -> <<"timeinterval">>;
element_type_to_json(image) -> <<"image">>;
element_type_to_json(chart) -> <<"chart">>;
element_type_to_json(imagebutton) -> <<"imagebutton">>;
element_type_to_json(checkbox) -> <<"checkbox">>;
element_type_to_json(combobox) -> <<"combobox">>;
element_type_to_json(inplace_textedit) -> <<"inplace_textedit">>;
element_type_to_json(separator) -> <<"separator">>;
element_type_to_json(html) -> <<"html">>;
element_type_to_json(tabs) -> <<"tabs">>;
element_type_to_json(radiogroup) -> <<"radiogroup">>;
element_type_to_json(property_grid) -> <<"property_grid">>.

-spec element_type_from_json(igor_json:json()) -> element_type().

element_type_from_json(<<"horizontal">>) -> horizontal;
element_type_from_json(<<"vertical">>) -> vertical;
element_type_from_json(<<"listing">>) -> listing;
element_type_from_json(<<"label">>) -> label;
element_type_from_json(<<"block">>) -> block;
element_type_from_json(<<"table">>) -> table;
element_type_from_json(<<"textedit">>) -> textedit;
element_type_from_json(<<"button">>) -> button;
element_type_from_json(<<"link">>) -> link;
element_type_from_json(<<"layout">>) -> layout;
element_type_from_json(<<"datetimepicker">>) -> datetimepicker;
element_type_from_json(<<"timeinterval">>) -> timeinterval;
element_type_from_json(<<"image">>) -> image;
element_type_from_json(<<"chart">>) -> chart;
element_type_from_json(<<"imagebutton">>) -> imagebutton;
element_type_from_json(<<"checkbox">>) -> checkbox;
element_type_from_json(<<"combobox">>) -> combobox;
element_type_from_json(<<"inplace_textedit">>) -> inplace_textedit;
element_type_from_json(<<"separator">>) -> separator;
element_type_from_json(<<"html">>) -> html;
element_type_from_json(<<"tabs">>) -> tabs;
element_type_from_json(<<"radiogroup">>) -> radiogroup;
element_type_from_json(<<"property_grid">>) -> property_grid.

-spec element_type_to_xml(element_type()) -> string().

element_type_to_xml(horizontal) -> "horizontal";
element_type_to_xml(vertical) -> "vertical";
element_type_to_xml(listing) -> "listing";
element_type_to_xml(label) -> "label";
element_type_to_xml(block) -> "block";
element_type_to_xml(table) -> "table";
element_type_to_xml(textedit) -> "textedit";
element_type_to_xml(button) -> "button";
element_type_to_xml(link) -> "link";
element_type_to_xml(layout) -> "layout";
element_type_to_xml(datetimepicker) -> "datetimepicker";
element_type_to_xml(timeinterval) -> "timeinterval";
element_type_to_xml(image) -> "image";
element_type_to_xml(chart) -> "chart";
element_type_to_xml(imagebutton) -> "imagebutton";
element_type_to_xml(checkbox) -> "checkbox";
element_type_to_xml(combobox) -> "combobox";
element_type_to_xml(inplace_textedit) -> "inplace_textedit";
element_type_to_xml(separator) -> "separator";
element_type_to_xml(html) -> "html";
element_type_to_xml(tabs) -> "tabs";
element_type_to_xml(radiogroup) -> "radiogroup";
element_type_to_xml(property_grid) -> "property_grid".

-spec element_type_from_xml(string()) -> element_type().

element_type_from_xml("horizontal") -> horizontal;
element_type_from_xml("vertical") -> vertical;
element_type_from_xml("listing") -> listing;
element_type_from_xml("label") -> label;
element_type_from_xml("block") -> block;
element_type_from_xml("table") -> table;
element_type_from_xml("textedit") -> textedit;
element_type_from_xml("button") -> button;
element_type_from_xml("link") -> link;
element_type_from_xml("layout") -> layout;
element_type_from_xml("datetimepicker") -> datetimepicker;
element_type_from_xml("timeinterval") -> timeinterval;
element_type_from_xml("image") -> image;
element_type_from_xml("chart") -> chart;
element_type_from_xml("imagebutton") -> imagebutton;
element_type_from_xml("checkbox") -> checkbox;
element_type_from_xml("combobox") -> combobox;
element_type_from_xml("inplace_textedit") -> inplace_textedit;
element_type_from_xml("separator") -> separator;
element_type_from_xml("html") -> html;
element_type_from_xml("tabs") -> tabs;
element_type_from_xml("radiogroup") -> radiogroup;
element_type_from_xml("property_grid") -> property_grid.

-spec horizontal_to_json(horizontal()) -> igor_json:json_object().

horizontal_to_json(Record) ->
    #horizontal{
        visible = Visible,
        on_load = OnLoad,
        on_hover = OnHover,
        items = Items
    } = Record,
    ?assert(Items =/= undefined),
    #{
        <<"type">> => igor_json:pack(horizontal, {custom, fun zeus_shared_protocol:element_type_to_json/1}),
        <<"visible">> => igor_json:pack(Visible, {custom, fun zeus_igor_custom:binding_to_json/1}),
        <<"on_load">> => igor_json:pack(OnLoad, {custom, fun zeus_shared_protocol:action_to_json/1}),
        <<"on_hover">> => igor_json:pack(OnHover, {custom, fun zeus_shared_protocol:popup_to_json/1}),
        <<"items">> => igor_json:pack(Items, {list, {custom, fun zeus_shared_protocol:element_to_json/1}})
    }.

-spec horizontal_from_json(igor_json:json_object()) -> horizontal().

horizontal_from_json(Json) ->
    #horizontal{
        visible = igor_json:parse(Json, <<"visible">>, {custom, fun zeus_igor_custom:binding_from_json/1}, undefined),
        on_load = igor_json:parse(Json, <<"on_load">>, {custom, fun zeus_shared_protocol:action_from_json/1}, undefined),
        on_hover = igor_json:parse(Json, <<"on_hover">>, {custom, fun zeus_shared_protocol:popup_from_json/1}, undefined),
        items = igor_json:parse(Json, <<"items">>, {list, {custom, fun zeus_shared_protocol:element_from_json/1}})
    }.

-spec horizontal_to_xml(horizontal()) -> igor_xml:xml_element().

horizontal_to_xml(Record) ->
    #horizontal{
        visible = Visible,
        on_load = OnLoad,
        on_hover = OnHover,
        items = Items
    } = Record,
    ?assert(Items =/= undefined),
    Content = igor_xml:pack_subelement('Visible', Visible, {option, {custom_element, fun zeus_igor_custom:binding_to_xml/1}})
    ++ igor_xml:pack_subelement('OnLoad', OnLoad, {option, {custom_element, fun zeus_shared_protocol:action_to_xml/1}})
    ++ igor_xml:pack_subelement('OnHover', OnHover, {option, {custom_element, fun zeus_shared_protocol:popup_to_xml/1}})
    ++ igor_xml:pack_content(Items, {list, {custom_element, fun zeus_shared_protocol:element_to_xml/1}}),
    #xmlElement{name = 'Horizontal', content = Content}.

-spec horizontal_from_xml(igor_xml:xml_element()) -> horizontal().

horizontal_from_xml(XmlElement) ->
    'Horizontal' = igor_xml:name(XmlElement),
    Visible = igor_xml:parse_subelement(XmlElement, 'Visible', {custom_element, fun zeus_igor_custom:binding_from_xml/1}, undefined),
    OnLoad = igor_xml:parse_subelement(XmlElement, 'OnLoad', {custom_element, fun zeus_shared_protocol:action_from_xml/1}, undefined),
    OnHover = igor_xml:parse_subelement(XmlElement, 'OnHover', {custom_element, fun zeus_shared_protocol:popup_from_xml/1}, undefined),
    Items = igor_xml:parse_content(igor_xml:content(XmlElement), {list, {custom_element, fun zeus_shared_protocol:element_from_xml/1}}),
    #horizontal{
        visible = Visible,
        on_load = OnLoad,
        on_hover = OnHover,
        items = Items
    }.

-spec vertical_to_json(vertical()) -> igor_json:json_object().

vertical_to_json(Record) ->
    #vertical{
        visible = Visible,
        on_load = OnLoad,
        on_hover = OnHover,
        items = Items
    } = Record,
    ?assert(Items =/= undefined),
    #{
        <<"type">> => igor_json:pack(vertical, {custom, fun zeus_shared_protocol:element_type_to_json/1}),
        <<"visible">> => igor_json:pack(Visible, {custom, fun zeus_igor_custom:binding_to_json/1}),
        <<"on_load">> => igor_json:pack(OnLoad, {custom, fun zeus_shared_protocol:action_to_json/1}),
        <<"on_hover">> => igor_json:pack(OnHover, {custom, fun zeus_shared_protocol:popup_to_json/1}),
        <<"items">> => igor_json:pack(Items, {list, {custom, fun zeus_shared_protocol:element_to_json/1}})
    }.

-spec vertical_from_json(igor_json:json_object()) -> vertical().

vertical_from_json(Json) ->
    #vertical{
        visible = igor_json:parse(Json, <<"visible">>, {custom, fun zeus_igor_custom:binding_from_json/1}, undefined),
        on_load = igor_json:parse(Json, <<"on_load">>, {custom, fun zeus_shared_protocol:action_from_json/1}, undefined),
        on_hover = igor_json:parse(Json, <<"on_hover">>, {custom, fun zeus_shared_protocol:popup_from_json/1}, undefined),
        items = igor_json:parse(Json, <<"items">>, {list, {custom, fun zeus_shared_protocol:element_from_json/1}})
    }.

-spec vertical_to_xml(vertical()) -> igor_xml:xml_element().

vertical_to_xml(Record) ->
    #vertical{
        visible = Visible,
        on_load = OnLoad,
        on_hover = OnHover,
        items = Items
    } = Record,
    ?assert(Items =/= undefined),
    Content = igor_xml:pack_subelement('Visible', Visible, {option, {custom_element, fun zeus_igor_custom:binding_to_xml/1}})
    ++ igor_xml:pack_subelement('OnLoad', OnLoad, {option, {custom_element, fun zeus_shared_protocol:action_to_xml/1}})
    ++ igor_xml:pack_subelement('OnHover', OnHover, {option, {custom_element, fun zeus_shared_protocol:popup_to_xml/1}})
    ++ igor_xml:pack_content(Items, {list, {custom_element, fun zeus_shared_protocol:element_to_xml/1}}),
    #xmlElement{name = 'Vertical', content = Content}.

-spec vertical_from_xml(igor_xml:xml_element()) -> vertical().

vertical_from_xml(XmlElement) ->
    'Vertical' = igor_xml:name(XmlElement),
    Visible = igor_xml:parse_subelement(XmlElement, 'Visible', {custom_element, fun zeus_igor_custom:binding_from_xml/1}, undefined),
    OnLoad = igor_xml:parse_subelement(XmlElement, 'OnLoad', {custom_element, fun zeus_shared_protocol:action_from_xml/1}, undefined),
    OnHover = igor_xml:parse_subelement(XmlElement, 'OnHover', {custom_element, fun zeus_shared_protocol:popup_from_xml/1}, undefined),
    Items = igor_xml:parse_content(igor_xml:content(XmlElement), {list, {custom_element, fun zeus_shared_protocol:element_from_xml/1}}),
    #vertical{
        visible = Visible,
        on_load = OnLoad,
        on_hover = OnHover,
        items = Items
    }.

-spec listing_to_json(listing()) -> igor_json:json_object().

listing_to_json(Record) ->
    #listing{
        visible = Visible,
        on_load = OnLoad,
        on_hover = OnHover,
        item_template = ItemTemplate,
        items = Items,
        show_separator = ShowSeparator
    } = Record,
    ?assert(ItemTemplate =/= undefined),
    ?assert(Items =/= undefined),
    ?assert(ShowSeparator =/= undefined),
    #{
        <<"type">> => igor_json:pack(listing, {custom, fun zeus_shared_protocol:element_type_to_json/1}),
        <<"visible">> => igor_json:pack(Visible, {custom, fun zeus_igor_custom:binding_to_json/1}),
        <<"on_load">> => igor_json:pack(OnLoad, {custom, fun zeus_shared_protocol:action_to_json/1}),
        <<"on_hover">> => igor_json:pack(OnHover, {custom, fun zeus_shared_protocol:popup_to_json/1}),
        <<"item_template">> => igor_json:pack(ItemTemplate, {custom, fun zeus_shared_protocol:element_to_json/1}),
        <<"items">> => igor_json:pack(Items, {custom, fun zeus_igor_custom:binding_to_json/1}),
        <<"show_separator">> => igor_json:pack(ShowSeparator, boolean)
    }.

-spec listing_from_json(igor_json:json_object()) -> listing().

listing_from_json(Json) ->
    #listing{
        visible = igor_json:parse(Json, <<"visible">>, {custom, fun zeus_igor_custom:binding_from_json/1}, undefined),
        on_load = igor_json:parse(Json, <<"on_load">>, {custom, fun zeus_shared_protocol:action_from_json/1}, undefined),
        on_hover = igor_json:parse(Json, <<"on_hover">>, {custom, fun zeus_shared_protocol:popup_from_json/1}, undefined),
        item_template = igor_json:parse(Json, <<"item_template">>, {custom, fun zeus_shared_protocol:element_from_json/1}),
        items = igor_json:parse(Json, <<"items">>, {custom, fun zeus_igor_custom:binding_from_json/1}),
        show_separator = igor_json:parse(Json, <<"show_separator">>, boolean, false)
    }.

-spec listing_to_xml(listing()) -> igor_xml:xml_element().

listing_to_xml(Record) ->
    #listing{
        visible = Visible,
        on_load = OnLoad,
        on_hover = OnHover,
        item_template = ItemTemplate,
        items = Items,
        show_separator = ShowSeparator
    } = Record,
    ?assert(ItemTemplate =/= undefined),
    ?assert(Items =/= undefined),
    ?assert(ShowSeparator =/= undefined),
    Content = igor_xml:pack_subelement('Visible', Visible, {option, {custom_element, fun zeus_igor_custom:binding_to_xml/1}})
    ++ igor_xml:pack_subelement('OnLoad', OnLoad, {option, {custom_element, fun zeus_shared_protocol:action_to_xml/1}})
    ++ igor_xml:pack_subelement('OnHover', OnHover, {option, {custom_element, fun zeus_shared_protocol:popup_to_xml/1}})
    ++ igor_xml:pack_content(ItemTemplate, {custom_element, fun zeus_shared_protocol:element_to_xml/1})
    ++ igor_xml:pack_subelement('Items', Items, {custom_element, fun zeus_igor_custom:binding_to_xml/1})
    ++ igor_xml:pack_subelement('ShowSeparator', ShowSeparator, boolean),
    #xmlElement{name = 'Listing', content = Content}.

-spec listing_from_xml(igor_xml:xml_element()) -> listing().

listing_from_xml(XmlElement) ->
    'Listing' = igor_xml:name(XmlElement),
    Visible = igor_xml:parse_subelement(XmlElement, 'Visible', {custom_element, fun zeus_igor_custom:binding_from_xml/1}, undefined),
    OnLoad = igor_xml:parse_subelement(XmlElement, 'OnLoad', {custom_element, fun zeus_shared_protocol:action_from_xml/1}, undefined),
    OnHover = igor_xml:parse_subelement(XmlElement, 'OnHover', {custom_element, fun zeus_shared_protocol:popup_from_xml/1}, undefined),
    ItemTemplate = igor_xml:parse_content(igor_xml:content(XmlElement), {custom_element, fun zeus_shared_protocol:element_from_xml/1}),
    Items = igor_xml:parse_subelement(XmlElement, 'Items', {custom_element, fun zeus_igor_custom:binding_from_xml/1}),
    ShowSeparator = igor_xml:parse_subelement(XmlElement, 'ShowSeparator', boolean, false),
    #listing{
        visible = Visible,
        on_load = OnLoad,
        on_hover = OnHover,
        item_template = ItemTemplate,
        items = Items,
        show_separator = ShowSeparator
    }.

-spec label_to_json(label()) -> igor_json:json_object().

label_to_json(Record) ->
    #label{
        visible = Visible,
        on_load = OnLoad,
        on_hover = OnHover,
        text = Text,
        color = Color
    } = Record,
    ?assert(Text =/= undefined),
    #{
        <<"type">> => igor_json:pack(label, {custom, fun zeus_shared_protocol:element_type_to_json/1}),
        <<"visible">> => igor_json:pack(Visible, {custom, fun zeus_igor_custom:binding_to_json/1}),
        <<"on_load">> => igor_json:pack(OnLoad, {custom, fun zeus_shared_protocol:action_to_json/1}),
        <<"on_hover">> => igor_json:pack(OnHover, {custom, fun zeus_shared_protocol:popup_to_json/1}),
        <<"text">> => igor_json:pack(Text, {custom, fun zeus_igor_custom:binding_to_json/1}),
        <<"color">> => igor_json:pack(Color, {custom, fun zeus_igor_custom:binding_to_json/1})
    }.

-spec label_from_json(igor_json:json_object()) -> label().

label_from_json(Json) ->
    #label{
        visible = igor_json:parse(Json, <<"visible">>, {custom, fun zeus_igor_custom:binding_from_json/1}, undefined),
        on_load = igor_json:parse(Json, <<"on_load">>, {custom, fun zeus_shared_protocol:action_from_json/1}, undefined),
        on_hover = igor_json:parse(Json, <<"on_hover">>, {custom, fun zeus_shared_protocol:popup_from_json/1}, undefined),
        text = igor_json:parse(Json, <<"text">>, {custom, fun zeus_igor_custom:binding_from_json/1}),
        color = igor_json:parse(Json, <<"color">>, {custom, fun zeus_igor_custom:binding_from_json/1}, undefined)
    }.

-spec label_to_xml(label()) -> igor_xml:xml_element().

label_to_xml(Record) ->
    #label{
        visible = Visible,
        on_load = OnLoad,
        on_hover = OnHover,
        text = Text,
        color = Color
    } = Record,
    ?assert(Text =/= undefined),
    Content = igor_xml:pack_subelement('Visible', Visible, {option, {custom_element, fun zeus_igor_custom:binding_to_xml/1}})
    ++ igor_xml:pack_subelement('OnLoad', OnLoad, {option, {custom_element, fun zeus_shared_protocol:action_to_xml/1}})
    ++ igor_xml:pack_subelement('OnHover', OnHover, {option, {custom_element, fun zeus_shared_protocol:popup_to_xml/1}})
    ++ igor_xml:pack_subelement('Text', Text, {custom_element, fun zeus_igor_custom:binding_to_xml/1})
    ++ igor_xml:pack_subelement('Color', Color, {option, {custom_element, fun zeus_igor_custom:binding_to_xml/1}}),
    #xmlElement{name = 'Label', content = Content}.

-spec label_from_xml(igor_xml:xml_element()) -> label().

label_from_xml(XmlElement) ->
    'Label' = igor_xml:name(XmlElement),
    Visible = igor_xml:parse_subelement(XmlElement, 'Visible', {custom_element, fun zeus_igor_custom:binding_from_xml/1}, undefined),
    OnLoad = igor_xml:parse_subelement(XmlElement, 'OnLoad', {custom_element, fun zeus_shared_protocol:action_from_xml/1}, undefined),
    OnHover = igor_xml:parse_subelement(XmlElement, 'OnHover', {custom_element, fun zeus_shared_protocol:popup_from_xml/1}, undefined),
    Text = igor_xml:parse_subelement(XmlElement, 'Text', {custom_element, fun zeus_igor_custom:binding_from_xml/1}),
    Color = igor_xml:parse_subelement(XmlElement, 'Color', {custom_element, fun zeus_igor_custom:binding_from_xml/1}, undefined),
    #label{
        visible = Visible,
        on_load = OnLoad,
        on_hover = OnHover,
        text = Text,
        color = Color
    }.

-spec block_to_json(block()) -> igor_json:json_object().

block_to_json(Record) ->
    #block{
        visible = Visible,
        on_load = OnLoad,
        on_hover = OnHover,
        caption_template = CaptionTemplate,
        content_template = ContentTemplate,
        caption = Caption,
        content = VarContent
    } = Record,
    ?assert(ContentTemplate =/= undefined),
    #{
        <<"type">> => igor_json:pack(block, {custom, fun zeus_shared_protocol:element_type_to_json/1}),
        <<"visible">> => igor_json:pack(Visible, {custom, fun zeus_igor_custom:binding_to_json/1}),
        <<"on_load">> => igor_json:pack(OnLoad, {custom, fun zeus_shared_protocol:action_to_json/1}),
        <<"on_hover">> => igor_json:pack(OnHover, {custom, fun zeus_shared_protocol:popup_to_json/1}),
        <<"caption_template">> => igor_json:pack(CaptionTemplate, {custom, fun zeus_shared_protocol:element_to_json/1}),
        <<"content_template">> => igor_json:pack(ContentTemplate, {custom, fun zeus_shared_protocol:element_to_json/1}),
        <<"caption">> => igor_json:pack(Caption, {custom, fun zeus_igor_custom:binding_to_json/1}),
        <<"content">> => igor_json:pack(VarContent, {custom, fun zeus_igor_custom:binding_to_json/1})
    }.

-spec block_from_json(igor_json:json_object()) -> block().

block_from_json(Json) ->
    #block{
        visible = igor_json:parse(Json, <<"visible">>, {custom, fun zeus_igor_custom:binding_from_json/1}, undefined),
        on_load = igor_json:parse(Json, <<"on_load">>, {custom, fun zeus_shared_protocol:action_from_json/1}, undefined),
        on_hover = igor_json:parse(Json, <<"on_hover">>, {custom, fun zeus_shared_protocol:popup_from_json/1}, undefined),
        caption_template = igor_json:parse(Json, <<"caption_template">>, {custom, fun zeus_shared_protocol:element_from_json/1}, undefined),
        content_template = igor_json:parse(Json, <<"content_template">>, {custom, fun zeus_shared_protocol:element_from_json/1}),
        caption = igor_json:parse(Json, <<"caption">>, {custom, fun zeus_igor_custom:binding_from_json/1}, undefined),
        content = igor_json:parse(Json, <<"content">>, {custom, fun zeus_igor_custom:binding_from_json/1}, undefined)
    }.

-spec block_to_xml(block()) -> igor_xml:xml_element().

block_to_xml(Record) ->
    #block{
        visible = Visible,
        on_load = OnLoad,
        on_hover = OnHover,
        caption_template = CaptionTemplate,
        content_template = ContentTemplate,
        caption = Caption,
        content = VarContent
    } = Record,
    ?assert(ContentTemplate =/= undefined),
    Content = igor_xml:pack_subelement('Visible', Visible, {option, {custom_element, fun zeus_igor_custom:binding_to_xml/1}})
    ++ igor_xml:pack_subelement('OnLoad', OnLoad, {option, {custom_element, fun zeus_shared_protocol:action_to_xml/1}})
    ++ igor_xml:pack_subelement('OnHover', OnHover, {option, {custom_element, fun zeus_shared_protocol:popup_to_xml/1}})
    ++ igor_xml:pack_subelement('CaptionTemplate', CaptionTemplate, {option, {custom_element, fun zeus_shared_protocol:element_to_xml/1}})
    ++ igor_xml:pack_content(ContentTemplate, {custom_element, fun zeus_shared_protocol:element_to_xml/1})
    ++ igor_xml:pack_subelement('Caption', Caption, {option, {custom_element, fun zeus_igor_custom:binding_to_xml/1}})
    ++ igor_xml:pack_subelement('Content', VarContent, {option, {custom_element, fun zeus_igor_custom:binding_to_xml/1}}),
    #xmlElement{name = 'Block', content = Content}.

-spec block_from_xml(igor_xml:xml_element()) -> block().

block_from_xml(XmlElement) ->
    'Block' = igor_xml:name(XmlElement),
    Visible = igor_xml:parse_subelement(XmlElement, 'Visible', {custom_element, fun zeus_igor_custom:binding_from_xml/1}, undefined),
    OnLoad = igor_xml:parse_subelement(XmlElement, 'OnLoad', {custom_element, fun zeus_shared_protocol:action_from_xml/1}, undefined),
    OnHover = igor_xml:parse_subelement(XmlElement, 'OnHover', {custom_element, fun zeus_shared_protocol:popup_from_xml/1}, undefined),
    CaptionTemplate = igor_xml:parse_subelement(XmlElement, 'CaptionTemplate', {custom_element, fun zeus_shared_protocol:element_from_xml/1}, undefined),
    ContentTemplate = igor_xml:parse_content(igor_xml:content(XmlElement), {custom_element, fun zeus_shared_protocol:element_from_xml/1}),
    Caption = igor_xml:parse_subelement(XmlElement, 'Caption', {custom_element, fun zeus_igor_custom:binding_from_xml/1}, undefined),
    VarContent = igor_xml:parse_subelement(XmlElement, 'Content', {custom_element, fun zeus_igor_custom:binding_from_xml/1}, undefined),
    #block{
        visible = Visible,
        on_load = OnLoad,
        on_hover = OnHover,
        caption_template = CaptionTemplate,
        content_template = ContentTemplate,
        caption = Caption,
        content = VarContent
    }.

-spec table_column_to_json(table_column()) -> igor_json:json_object().

table_column_to_json(Record) ->
    #table_column{
        caption_template = CaptionTemplate,
        content_template = ContentTemplate,
        caption = Caption,
        content = VarContent,
        align = Align,
        sort_by = SortBy,
        sort_dir = SortDir
    } = Record,
    ?assert(Caption =/= undefined),
    #{
        <<"caption_template">> => igor_json:pack(CaptionTemplate, {custom, fun zeus_shared_protocol:element_to_json/1}),
        <<"content_template">> => igor_json:pack(ContentTemplate, {custom, fun zeus_shared_protocol:element_to_json/1}),
        <<"caption">> => igor_json:pack(Caption, {custom, fun zeus_igor_custom:binding_to_json/1}),
        <<"content">> => igor_json:pack(VarContent, {custom, fun zeus_igor_custom:binding_to_json/1}),
        <<"align">> => igor_json:pack(Align, {custom, fun zeus_igor_custom:binding_to_json/1}),
        <<"sort_by">> => igor_json:pack(SortBy, {custom, fun zeus_igor_custom:binding_to_json/1}),
        <<"sort_dir">> => igor_json:pack(SortDir, {custom, fun zeus_igor_custom:binding_to_json/1})
    }.

-spec table_column_from_json(igor_json:json_object()) -> table_column().

table_column_from_json(Json) ->
    #table_column{
        caption_template = igor_json:parse(Json, <<"caption_template">>, {custom, fun zeus_shared_protocol:element_from_json/1}, undefined),
        content_template = igor_json:parse(Json, <<"content_template">>, {custom, fun zeus_shared_protocol:element_from_json/1}, undefined),
        caption = igor_json:parse(Json, <<"caption">>, {custom, fun zeus_igor_custom:binding_from_json/1}),
        content = igor_json:parse(Json, <<"content">>, {custom, fun zeus_igor_custom:binding_from_json/1}, undefined),
        align = igor_json:parse(Json, <<"align">>, {custom, fun zeus_igor_custom:binding_from_json/1}, undefined),
        sort_by = igor_json:parse(Json, <<"sort_by">>, {custom, fun zeus_igor_custom:binding_from_json/1}, undefined),
        sort_dir = igor_json:parse(Json, <<"sort_dir">>, {custom, fun zeus_igor_custom:binding_from_json/1}, undefined)
    }.

-spec table_column_to_xml(table_column()) -> igor_xml:xml_element().

table_column_to_xml(Record) ->
    #table_column{
        caption_template = CaptionTemplate,
        content_template = ContentTemplate,
        caption = Caption,
        content = VarContent,
        align = Align,
        sort_by = SortBy,
        sort_dir = SortDir
    } = Record,
    ?assert(Caption =/= undefined),
    Content = igor_xml:pack_subelement('CaptionTemplate', CaptionTemplate, {option, {custom_element, fun zeus_shared_protocol:element_to_xml/1}})
    ++ igor_xml:pack_content(ContentTemplate, {option, {custom_element, fun zeus_shared_protocol:element_to_xml/1}})
    ++ igor_xml:pack_subelement('Caption', Caption, {custom_element, fun zeus_igor_custom:binding_to_xml/1})
    ++ igor_xml:pack_subelement('Content', VarContent, {option, {custom_element, fun zeus_igor_custom:binding_to_xml/1}})
    ++ igor_xml:pack_subelement('Align', Align, {option, {custom_element, fun zeus_igor_custom:binding_to_xml/1}})
    ++ igor_xml:pack_subelement('SortBy', SortBy, {option, {custom_element, fun zeus_igor_custom:binding_to_xml/1}})
    ++ igor_xml:pack_subelement('SortDir', SortDir, {option, {custom_element, fun zeus_igor_custom:binding_to_xml/1}}),
    #xmlElement{name = 'TableColumn', content = Content}.

-spec table_column_from_xml(igor_xml:xml_element()) -> table_column().

table_column_from_xml(XmlElement) ->
    'TableColumn' = igor_xml:name(XmlElement),
    CaptionTemplate = igor_xml:parse_subelement(XmlElement, 'CaptionTemplate', {custom_element, fun zeus_shared_protocol:element_from_xml/1}, undefined),
    ContentTemplate = igor_xml:parse_content(igor_xml:content(XmlElement), {custom_element, fun zeus_shared_protocol:element_from_xml/1}, undefined),
    Caption = igor_xml:parse_subelement(XmlElement, 'Caption', {custom_element, fun zeus_igor_custom:binding_from_xml/1}),
    VarContent = igor_xml:parse_subelement(XmlElement, 'Content', {custom_element, fun zeus_igor_custom:binding_from_xml/1}, undefined),
    Align = igor_xml:parse_subelement(XmlElement, 'Align', {custom_element, fun zeus_igor_custom:binding_from_xml/1}, undefined),
    SortBy = igor_xml:parse_subelement(XmlElement, 'SortBy', {custom_element, fun zeus_igor_custom:binding_from_xml/1}, undefined),
    SortDir = igor_xml:parse_subelement(XmlElement, 'SortDir', {custom_element, fun zeus_igor_custom:binding_from_xml/1}, undefined),
    #table_column{
        caption_template = CaptionTemplate,
        content_template = ContentTemplate,
        caption = Caption,
        content = VarContent,
        align = Align,
        sort_by = SortBy,
        sort_dir = SortDir
    }.

-spec table_to_json(table()) -> igor_json:json_object().

table_to_json(Record) ->
    #table{
        visible = Visible,
        on_load = OnLoad,
        on_hover = OnHover,
        columns = Columns,
        rows = Rows,
        url = Url,
        pagination = Pagination,
        compact = Compact
    } = Record,
    ?assert(Columns =/= undefined),
    ?assert(Pagination =/= undefined),
    ?assert(Compact =/= undefined),
    #{
        <<"type">> => igor_json:pack(table, {custom, fun zeus_shared_protocol:element_type_to_json/1}),
        <<"visible">> => igor_json:pack(Visible, {custom, fun zeus_igor_custom:binding_to_json/1}),
        <<"on_load">> => igor_json:pack(OnLoad, {custom, fun zeus_shared_protocol:action_to_json/1}),
        <<"on_hover">> => igor_json:pack(OnHover, {custom, fun zeus_shared_protocol:popup_to_json/1}),
        <<"columns">> => igor_json:pack(Columns, {list, {custom, fun zeus_shared_protocol:table_column_to_json/1}}),
        <<"rows">> => igor_json:pack(Rows, {custom, fun zeus_igor_custom:binding_to_json/1}),
        <<"url">> => igor_json:pack(Url, string),
        <<"pagination">> => igor_json:pack(Pagination, boolean),
        <<"compact">> => igor_json:pack(Compact, boolean)
    }.

-spec table_from_json(igor_json:json_object()) -> table().

table_from_json(Json) ->
    #table{
        visible = igor_json:parse(Json, <<"visible">>, {custom, fun zeus_igor_custom:binding_from_json/1}, undefined),
        on_load = igor_json:parse(Json, <<"on_load">>, {custom, fun zeus_shared_protocol:action_from_json/1}, undefined),
        on_hover = igor_json:parse(Json, <<"on_hover">>, {custom, fun zeus_shared_protocol:popup_from_json/1}, undefined),
        columns = igor_json:parse(Json, <<"columns">>, {list, {custom, fun zeus_shared_protocol:table_column_from_json/1}}, []),
        rows = igor_json:parse(Json, <<"rows">>, {custom, fun zeus_igor_custom:binding_from_json/1}, undefined),
        url = igor_json:parse(Json, <<"url">>, string, undefined),
        pagination = igor_json:parse(Json, <<"pagination">>, boolean, true),
        compact = igor_json:parse(Json, <<"compact">>, boolean, false)
    }.

-spec table_to_xml(table()) -> igor_xml:xml_element().

table_to_xml(Record) ->
    #table{
        visible = Visible,
        on_load = OnLoad,
        on_hover = OnHover,
        columns = Columns,
        rows = Rows,
        url = Url,
        pagination = Pagination,
        compact = Compact
    } = Record,
    ?assert(Columns =/= undefined),
    ?assert(Pagination =/= undefined),
    ?assert(Compact =/= undefined),
    Content = igor_xml:pack_subelement('Visible', Visible, {option, {custom_element, fun zeus_igor_custom:binding_to_xml/1}})
    ++ igor_xml:pack_subelement('OnLoad', OnLoad, {option, {custom_element, fun zeus_shared_protocol:action_to_xml/1}})
    ++ igor_xml:pack_subelement('OnHover', OnHover, {option, {custom_element, fun zeus_shared_protocol:popup_to_xml/1}})
    ++ igor_xml:pack_content(Columns, {list, {custom_element, fun zeus_shared_protocol:table_column_to_xml/1}})
    ++ igor_xml:pack_subelement('Rows', Rows, {option, {custom_element, fun zeus_igor_custom:binding_to_xml/1}})
    ++ igor_xml:pack_subelement('Url', Url, {option, string})
    ++ igor_xml:pack_subelement('Pagination', Pagination, boolean)
    ++ igor_xml:pack_subelement('Compact', Compact, boolean),
    #xmlElement{name = 'Table', content = Content}.

-spec table_from_xml(igor_xml:xml_element()) -> table().

table_from_xml(XmlElement) ->
    'Table' = igor_xml:name(XmlElement),
    Visible = igor_xml:parse_subelement(XmlElement, 'Visible', {custom_element, fun zeus_igor_custom:binding_from_xml/1}, undefined),
    OnLoad = igor_xml:parse_subelement(XmlElement, 'OnLoad', {custom_element, fun zeus_shared_protocol:action_from_xml/1}, undefined),
    OnHover = igor_xml:parse_subelement(XmlElement, 'OnHover', {custom_element, fun zeus_shared_protocol:popup_from_xml/1}, undefined),
    Columns = igor_xml:parse_content(igor_xml:content(XmlElement), {list, {custom_element, fun zeus_shared_protocol:table_column_from_xml/1}}, []),
    Rows = igor_xml:parse_subelement(XmlElement, 'Rows', {custom_element, fun zeus_igor_custom:binding_from_xml/1}, undefined),
    Url = igor_xml:parse_subelement(XmlElement, 'Url', string, undefined),
    Pagination = igor_xml:parse_subelement(XmlElement, 'Pagination', boolean, true),
    Compact = igor_xml:parse_subelement(XmlElement, 'Compact', boolean, false),
    #table{
        visible = Visible,
        on_load = OnLoad,
        on_hover = OnHover,
        columns = Columns,
        rows = Rows,
        url = Url,
        pagination = Pagination,
        compact = Compact
    }.

-spec text_edit_to_json(text_edit()) -> igor_json:json_object().

text_edit_to_json(Record) ->
    #text_edit{
        visible = Visible,
        on_load = OnLoad,
        on_hover = OnHover,
        placeholder = Placeholder,
        text = Text,
        kind = Kind,
        multiline = Multiline
    } = Record,
    ?assert(Text =/= undefined),
    ?assert(Kind =/= undefined),
    ?assert(Multiline =/= undefined),
    #{
        <<"type">> => igor_json:pack(textedit, {custom, fun zeus_shared_protocol:element_type_to_json/1}),
        <<"visible">> => igor_json:pack(Visible, {custom, fun zeus_igor_custom:binding_to_json/1}),
        <<"on_load">> => igor_json:pack(OnLoad, {custom, fun zeus_shared_protocol:action_to_json/1}),
        <<"on_hover">> => igor_json:pack(OnHover, {custom, fun zeus_shared_protocol:popup_to_json/1}),
        <<"placeholder">> => igor_json:pack(Placeholder, string),
        <<"text">> => igor_json:pack(Text, {custom, fun zeus_igor_custom:binding_to_json/1}),
        <<"kind">> => igor_json:pack(Kind, {custom, fun zeus_shared_protocol:text_edit_kind_to_json/1}),
        <<"multiline">> => igor_json:pack(Multiline, boolean)
    }.

-spec text_edit_from_json(igor_json:json_object()) -> text_edit().

text_edit_from_json(Json) ->
    #text_edit{
        visible = igor_json:parse(Json, <<"visible">>, {custom, fun zeus_igor_custom:binding_from_json/1}, undefined),
        on_load = igor_json:parse(Json, <<"on_load">>, {custom, fun zeus_shared_protocol:action_from_json/1}, undefined),
        on_hover = igor_json:parse(Json, <<"on_hover">>, {custom, fun zeus_shared_protocol:popup_from_json/1}, undefined),
        placeholder = igor_json:parse(Json, <<"placeholder">>, string, undefined),
        text = igor_json:parse(Json, <<"text">>, {custom, fun zeus_igor_custom:binding_from_json/1}),
        kind = igor_json:parse(Json, <<"kind">>, {custom, fun zeus_shared_protocol:text_edit_kind_from_json/1}, text),
        multiline = igor_json:parse(Json, <<"multiline">>, boolean, false)
    }.

-spec text_edit_to_xml(text_edit()) -> igor_xml:xml_element().

text_edit_to_xml(Record) ->
    #text_edit{
        visible = Visible,
        on_load = OnLoad,
        on_hover = OnHover,
        placeholder = Placeholder,
        text = Text,
        kind = Kind,
        multiline = Multiline
    } = Record,
    ?assert(Text =/= undefined),
    ?assert(Kind =/= undefined),
    ?assert(Multiline =/= undefined),
    Content = igor_xml:pack_subelement('Visible', Visible, {option, {custom_element, fun zeus_igor_custom:binding_to_xml/1}})
    ++ igor_xml:pack_subelement('OnLoad', OnLoad, {option, {custom_element, fun zeus_shared_protocol:action_to_xml/1}})
    ++ igor_xml:pack_subelement('OnHover', OnHover, {option, {custom_element, fun zeus_shared_protocol:popup_to_xml/1}})
    ++ igor_xml:pack_subelement('Placeholder', Placeholder, {option, string})
    ++ igor_xml:pack_subelement('Text', Text, {custom_element, fun zeus_igor_custom:binding_to_xml/1})
    ++ igor_xml:pack_subelement('Kind', Kind, {custom_simple_type, fun zeus_shared_protocol:text_edit_kind_to_xml/1})
    ++ igor_xml:pack_subelement('Multiline', Multiline, boolean),
    #xmlElement{name = 'TextEdit', content = Content}.

-spec text_edit_from_xml(igor_xml:xml_element()) -> text_edit().

text_edit_from_xml(XmlElement) ->
    'TextEdit' = igor_xml:name(XmlElement),
    Visible = igor_xml:parse_subelement(XmlElement, 'Visible', {custom_element, fun zeus_igor_custom:binding_from_xml/1}, undefined),
    OnLoad = igor_xml:parse_subelement(XmlElement, 'OnLoad', {custom_element, fun zeus_shared_protocol:action_from_xml/1}, undefined),
    OnHover = igor_xml:parse_subelement(XmlElement, 'OnHover', {custom_element, fun zeus_shared_protocol:popup_from_xml/1}, undefined),
    Placeholder = igor_xml:parse_subelement(XmlElement, 'Placeholder', string, undefined),
    Text = igor_xml:parse_subelement(XmlElement, 'Text', {custom_element, fun zeus_igor_custom:binding_from_xml/1}),
    Kind = igor_xml:parse_subelement(XmlElement, 'Kind', {custom_simple_type, fun zeus_shared_protocol:text_edit_kind_from_xml/1}, text),
    Multiline = igor_xml:parse_subelement(XmlElement, 'Multiline', boolean, false),
    #text_edit{
        visible = Visible,
        on_load = OnLoad,
        on_hover = OnHover,
        placeholder = Placeholder,
        text = Text,
        kind = Kind,
        multiline = Multiline
    }.

-spec button_to_json(button()) -> igor_json:json_object().

button_to_json(Record) ->
    #button{
        visible = Visible,
        on_load = OnLoad,
        on_hover = OnHover,
        text = Text,
        on_click = OnClick
    } = Record,
    ?assert(Text =/= undefined),
    ?assert(OnClick =/= undefined),
    #{
        <<"type">> => igor_json:pack(button, {custom, fun zeus_shared_protocol:element_type_to_json/1}),
        <<"visible">> => igor_json:pack(Visible, {custom, fun zeus_igor_custom:binding_to_json/1}),
        <<"on_load">> => igor_json:pack(OnLoad, {custom, fun zeus_shared_protocol:action_to_json/1}),
        <<"on_hover">> => igor_json:pack(OnHover, {custom, fun zeus_shared_protocol:popup_to_json/1}),
        <<"text">> => igor_json:pack(Text, {custom, fun zeus_igor_custom:binding_to_json/1}),
        <<"on_click">> => igor_json:pack(OnClick, {custom, fun zeus_shared_protocol:action_to_json/1})
    }.

-spec button_from_json(igor_json:json_object()) -> button().

button_from_json(Json) ->
    #button{
        visible = igor_json:parse(Json, <<"visible">>, {custom, fun zeus_igor_custom:binding_from_json/1}, undefined),
        on_load = igor_json:parse(Json, <<"on_load">>, {custom, fun zeus_shared_protocol:action_from_json/1}, undefined),
        on_hover = igor_json:parse(Json, <<"on_hover">>, {custom, fun zeus_shared_protocol:popup_from_json/1}, undefined),
        text = igor_json:parse(Json, <<"text">>, {custom, fun zeus_igor_custom:binding_from_json/1}),
        on_click = igor_json:parse(Json, <<"on_click">>, {custom, fun zeus_shared_protocol:action_from_json/1})
    }.

-spec button_to_xml(button()) -> igor_xml:xml_element().

button_to_xml(Record) ->
    #button{
        visible = Visible,
        on_load = OnLoad,
        on_hover = OnHover,
        text = Text,
        on_click = OnClick
    } = Record,
    ?assert(Text =/= undefined),
    ?assert(OnClick =/= undefined),
    Content = igor_xml:pack_subelement('Visible', Visible, {option, {custom_element, fun zeus_igor_custom:binding_to_xml/1}})
    ++ igor_xml:pack_subelement('OnLoad', OnLoad, {option, {custom_element, fun zeus_shared_protocol:action_to_xml/1}})
    ++ igor_xml:pack_subelement('OnHover', OnHover, {option, {custom_element, fun zeus_shared_protocol:popup_to_xml/1}})
    ++ igor_xml:pack_subelement('Text', Text, {custom_element, fun zeus_igor_custom:binding_to_xml/1})
    ++ igor_xml:pack_content(OnClick, {custom_element, fun zeus_shared_protocol:action_to_xml/1}),
    #xmlElement{name = 'Button', content = Content}.

-spec button_from_xml(igor_xml:xml_element()) -> button().

button_from_xml(XmlElement) ->
    'Button' = igor_xml:name(XmlElement),
    Visible = igor_xml:parse_subelement(XmlElement, 'Visible', {custom_element, fun zeus_igor_custom:binding_from_xml/1}, undefined),
    OnLoad = igor_xml:parse_subelement(XmlElement, 'OnLoad', {custom_element, fun zeus_shared_protocol:action_from_xml/1}, undefined),
    OnHover = igor_xml:parse_subelement(XmlElement, 'OnHover', {custom_element, fun zeus_shared_protocol:popup_from_xml/1}, undefined),
    Text = igor_xml:parse_subelement(XmlElement, 'Text', {custom_element, fun zeus_igor_custom:binding_from_xml/1}),
    OnClick = igor_xml:parse_content(igor_xml:content(XmlElement), {custom_element, fun zeus_shared_protocol:action_from_xml/1}),
    #button{
        visible = Visible,
        on_load = OnLoad,
        on_hover = OnHover,
        text = Text,
        on_click = OnClick
    }.

-spec link_to_json(link()) -> igor_json:json_object().

link_to_json(Record) ->
    #link{
        visible = Visible,
        on_load = OnLoad,
        on_hover = OnHover,
        text = Text,
        on_click = OnClick
    } = Record,
    ?assert(Text =/= undefined),
    ?assert(OnClick =/= undefined),
    #{
        <<"type">> => igor_json:pack(link, {custom, fun zeus_shared_protocol:element_type_to_json/1}),
        <<"visible">> => igor_json:pack(Visible, {custom, fun zeus_igor_custom:binding_to_json/1}),
        <<"on_load">> => igor_json:pack(OnLoad, {custom, fun zeus_shared_protocol:action_to_json/1}),
        <<"on_hover">> => igor_json:pack(OnHover, {custom, fun zeus_shared_protocol:popup_to_json/1}),
        <<"text">> => igor_json:pack(Text, {custom, fun zeus_igor_custom:binding_to_json/1}),
        <<"on_click">> => igor_json:pack(OnClick, {custom, fun zeus_shared_protocol:action_to_json/1})
    }.

-spec link_from_json(igor_json:json_object()) -> link().

link_from_json(Json) ->
    #link{
        visible = igor_json:parse(Json, <<"visible">>, {custom, fun zeus_igor_custom:binding_from_json/1}, undefined),
        on_load = igor_json:parse(Json, <<"on_load">>, {custom, fun zeus_shared_protocol:action_from_json/1}, undefined),
        on_hover = igor_json:parse(Json, <<"on_hover">>, {custom, fun zeus_shared_protocol:popup_from_json/1}, undefined),
        text = igor_json:parse(Json, <<"text">>, {custom, fun zeus_igor_custom:binding_from_json/1}),
        on_click = igor_json:parse(Json, <<"on_click">>, {custom, fun zeus_shared_protocol:action_from_json/1})
    }.

-spec link_to_xml(link()) -> igor_xml:xml_element().

link_to_xml(Record) ->
    #link{
        visible = Visible,
        on_load = OnLoad,
        on_hover = OnHover,
        text = Text,
        on_click = OnClick
    } = Record,
    ?assert(Text =/= undefined),
    ?assert(OnClick =/= undefined),
    Content = igor_xml:pack_subelement('Visible', Visible, {option, {custom_element, fun zeus_igor_custom:binding_to_xml/1}})
    ++ igor_xml:pack_subelement('OnLoad', OnLoad, {option, {custom_element, fun zeus_shared_protocol:action_to_xml/1}})
    ++ igor_xml:pack_subelement('OnHover', OnHover, {option, {custom_element, fun zeus_shared_protocol:popup_to_xml/1}})
    ++ igor_xml:pack_subelement('Text', Text, {custom_element, fun zeus_igor_custom:binding_to_xml/1})
    ++ igor_xml:pack_content(OnClick, {custom_element, fun zeus_shared_protocol:action_to_xml/1}),
    #xmlElement{name = 'Link', content = Content}.

-spec link_from_xml(igor_xml:xml_element()) -> link().

link_from_xml(XmlElement) ->
    'Link' = igor_xml:name(XmlElement),
    Visible = igor_xml:parse_subelement(XmlElement, 'Visible', {custom_element, fun zeus_igor_custom:binding_from_xml/1}, undefined),
    OnLoad = igor_xml:parse_subelement(XmlElement, 'OnLoad', {custom_element, fun zeus_shared_protocol:action_from_xml/1}, undefined),
    OnHover = igor_xml:parse_subelement(XmlElement, 'OnHover', {custom_element, fun zeus_shared_protocol:popup_from_xml/1}, undefined),
    Text = igor_xml:parse_subelement(XmlElement, 'Text', {custom_element, fun zeus_igor_custom:binding_from_xml/1}),
    OnClick = igor_xml:parse_content(igor_xml:content(XmlElement), {custom_element, fun zeus_shared_protocol:action_from_xml/1}),
    #link{
        visible = Visible,
        on_load = OnLoad,
        on_hover = OnHover,
        text = Text,
        on_click = OnClick
    }.

-spec layout_to_json(layout()) -> igor_json:json_object().

layout_to_json(Record) ->
    #layout{
        visible = Visible,
        on_load = OnLoad,
        on_hover = OnHover,
        layout_url = LayoutUrl,
        content = VarContent
    } = Record,
    ?assert(LayoutUrl =/= undefined),
    ?assert(VarContent =/= undefined),
    #{
        <<"type">> => igor_json:pack(layout, {custom, fun zeus_shared_protocol:element_type_to_json/1}),
        <<"visible">> => igor_json:pack(Visible, {custom, fun zeus_igor_custom:binding_to_json/1}),
        <<"on_load">> => igor_json:pack(OnLoad, {custom, fun zeus_shared_protocol:action_to_json/1}),
        <<"on_hover">> => igor_json:pack(OnHover, {custom, fun zeus_shared_protocol:popup_to_json/1}),
        <<"layout_url">> => igor_json:pack(LayoutUrl, string),
        <<"content">> => igor_json:pack(VarContent, {custom, fun zeus_igor_custom:binding_to_json/1})
    }.

-spec layout_from_json(igor_json:json_object()) -> layout().

layout_from_json(Json) ->
    #layout{
        visible = igor_json:parse(Json, <<"visible">>, {custom, fun zeus_igor_custom:binding_from_json/1}, undefined),
        on_load = igor_json:parse(Json, <<"on_load">>, {custom, fun zeus_shared_protocol:action_from_json/1}, undefined),
        on_hover = igor_json:parse(Json, <<"on_hover">>, {custom, fun zeus_shared_protocol:popup_from_json/1}, undefined),
        layout_url = igor_json:parse(Json, <<"layout_url">>, string),
        content = igor_json:parse(Json, <<"content">>, {custom, fun zeus_igor_custom:binding_from_json/1})
    }.

-spec layout_to_xml(layout()) -> igor_xml:xml_element().

layout_to_xml(Record) ->
    #layout{
        visible = Visible,
        on_load = OnLoad,
        on_hover = OnHover,
        layout_url = LayoutUrl,
        content = VarContent
    } = Record,
    ?assert(LayoutUrl =/= undefined),
    ?assert(VarContent =/= undefined),
    Content = igor_xml:pack_subelement('Visible', Visible, {option, {custom_element, fun zeus_igor_custom:binding_to_xml/1}})
    ++ igor_xml:pack_subelement('OnLoad', OnLoad, {option, {custom_element, fun zeus_shared_protocol:action_to_xml/1}})
    ++ igor_xml:pack_subelement('OnHover', OnHover, {option, {custom_element, fun zeus_shared_protocol:popup_to_xml/1}})
    ++ igor_xml:pack_subelement('LayoutUrl', LayoutUrl, string)
    ++ igor_xml:pack_subelement('Content', VarContent, {custom_element, fun zeus_igor_custom:binding_to_xml/1}),
    #xmlElement{name = 'Layout', content = Content}.

-spec layout_from_xml(igor_xml:xml_element()) -> layout().

layout_from_xml(XmlElement) ->
    'Layout' = igor_xml:name(XmlElement),
    Visible = igor_xml:parse_subelement(XmlElement, 'Visible', {custom_element, fun zeus_igor_custom:binding_from_xml/1}, undefined),
    OnLoad = igor_xml:parse_subelement(XmlElement, 'OnLoad', {custom_element, fun zeus_shared_protocol:action_from_xml/1}, undefined),
    OnHover = igor_xml:parse_subelement(XmlElement, 'OnHover', {custom_element, fun zeus_shared_protocol:popup_from_xml/1}, undefined),
    LayoutUrl = igor_xml:parse_subelement(XmlElement, 'LayoutUrl', string),
    VarContent = igor_xml:parse_subelement(XmlElement, 'Content', {custom_element, fun zeus_igor_custom:binding_from_xml/1}),
    #layout{
        visible = Visible,
        on_load = OnLoad,
        on_hover = OnHover,
        layout_url = LayoutUrl,
        content = VarContent
    }.

-spec date_time_picker_to_json(date_time_picker()) -> igor_json:json_object().

date_time_picker_to_json(Record) ->
    #date_time_picker{
        visible = Visible,
        on_load = OnLoad,
        on_hover = OnHover,
        date_time = DateTime,
        mode = Mode
    } = Record,
    ?assert(DateTime =/= undefined),
    ?assert(Mode =/= undefined),
    #{
        <<"type">> => igor_json:pack(datetimepicker, {custom, fun zeus_shared_protocol:element_type_to_json/1}),
        <<"visible">> => igor_json:pack(Visible, {custom, fun zeus_igor_custom:binding_to_json/1}),
        <<"on_load">> => igor_json:pack(OnLoad, {custom, fun zeus_shared_protocol:action_to_json/1}),
        <<"on_hover">> => igor_json:pack(OnHover, {custom, fun zeus_shared_protocol:popup_to_json/1}),
        <<"date_time">> => igor_json:pack(DateTime, {custom, fun zeus_igor_custom:binding_to_json/1}),
        <<"mode">> => igor_json:pack(Mode, {custom, fun zeus_shared_protocol:date_time_mode_to_json/1})
    }.

-spec date_time_picker_from_json(igor_json:json_object()) -> date_time_picker().

date_time_picker_from_json(Json) ->
    #date_time_picker{
        visible = igor_json:parse(Json, <<"visible">>, {custom, fun zeus_igor_custom:binding_from_json/1}, undefined),
        on_load = igor_json:parse(Json, <<"on_load">>, {custom, fun zeus_shared_protocol:action_from_json/1}, undefined),
        on_hover = igor_json:parse(Json, <<"on_hover">>, {custom, fun zeus_shared_protocol:popup_from_json/1}, undefined),
        date_time = igor_json:parse(Json, <<"date_time">>, {custom, fun zeus_igor_custom:binding_from_json/1}),
        mode = igor_json:parse(Json, <<"mode">>, {custom, fun zeus_shared_protocol:date_time_mode_from_json/1}, datetime)
    }.

-spec date_time_picker_to_xml(date_time_picker()) -> igor_xml:xml_element().

date_time_picker_to_xml(Record) ->
    #date_time_picker{
        visible = Visible,
        on_load = OnLoad,
        on_hover = OnHover,
        date_time = DateTime,
        mode = Mode
    } = Record,
    ?assert(DateTime =/= undefined),
    ?assert(Mode =/= undefined),
    Content = igor_xml:pack_subelement('Visible', Visible, {option, {custom_element, fun zeus_igor_custom:binding_to_xml/1}})
    ++ igor_xml:pack_subelement('OnLoad', OnLoad, {option, {custom_element, fun zeus_shared_protocol:action_to_xml/1}})
    ++ igor_xml:pack_subelement('OnHover', OnHover, {option, {custom_element, fun zeus_shared_protocol:popup_to_xml/1}})
    ++ igor_xml:pack_subelement('DateTime', DateTime, {custom_element, fun zeus_igor_custom:binding_to_xml/1})
    ++ igor_xml:pack_subelement('Mode', Mode, {custom_simple_type, fun zeus_shared_protocol:date_time_mode_to_xml/1}),
    #xmlElement{name = 'DateTimePicker', content = Content}.

-spec date_time_picker_from_xml(igor_xml:xml_element()) -> date_time_picker().

date_time_picker_from_xml(XmlElement) ->
    'DateTimePicker' = igor_xml:name(XmlElement),
    Visible = igor_xml:parse_subelement(XmlElement, 'Visible', {custom_element, fun zeus_igor_custom:binding_from_xml/1}, undefined),
    OnLoad = igor_xml:parse_subelement(XmlElement, 'OnLoad', {custom_element, fun zeus_shared_protocol:action_from_xml/1}, undefined),
    OnHover = igor_xml:parse_subelement(XmlElement, 'OnHover', {custom_element, fun zeus_shared_protocol:popup_from_xml/1}, undefined),
    DateTime = igor_xml:parse_subelement(XmlElement, 'DateTime', {custom_element, fun zeus_igor_custom:binding_from_xml/1}),
    Mode = igor_xml:parse_subelement(XmlElement, 'Mode', {custom_simple_type, fun zeus_shared_protocol:date_time_mode_from_xml/1}, datetime),
    #date_time_picker{
        visible = Visible,
        on_load = OnLoad,
        on_hover = OnHover,
        date_time = DateTime,
        mode = Mode
    }.

-spec time_interval_to_json(time_interval()) -> igor_json:json_object().

time_interval_to_json(Record) ->
    #time_interval{
        visible = Visible,
        on_load = OnLoad,
        on_hover = OnHover,
        interval = Interval,
        mode = Mode
    } = Record,
    ?assert(Interval =/= undefined),
    ?assert(Mode =/= undefined),
    #{
        <<"type">> => igor_json:pack(timeinterval, {custom, fun zeus_shared_protocol:element_type_to_json/1}),
        <<"visible">> => igor_json:pack(Visible, {custom, fun zeus_igor_custom:binding_to_json/1}),
        <<"on_load">> => igor_json:pack(OnLoad, {custom, fun zeus_shared_protocol:action_to_json/1}),
        <<"on_hover">> => igor_json:pack(OnHover, {custom, fun zeus_shared_protocol:popup_to_json/1}),
        <<"interval">> => igor_json:pack(Interval, {custom, fun zeus_igor_custom:binding_to_json/1}),
        <<"mode">> => igor_json:pack(Mode, {custom, fun zeus_shared_protocol:time_span_to_json/1})
    }.

-spec time_interval_from_json(igor_json:json_object()) -> time_interval().

time_interval_from_json(Json) ->
    #time_interval{
        visible = igor_json:parse(Json, <<"visible">>, {custom, fun zeus_igor_custom:binding_from_json/1}, undefined),
        on_load = igor_json:parse(Json, <<"on_load">>, {custom, fun zeus_shared_protocol:action_from_json/1}, undefined),
        on_hover = igor_json:parse(Json, <<"on_hover">>, {custom, fun zeus_shared_protocol:popup_from_json/1}, undefined),
        interval = igor_json:parse(Json, <<"interval">>, {custom, fun zeus_igor_custom:binding_from_json/1}),
        mode = igor_json:parse(Json, <<"mode">>, {custom, fun zeus_shared_protocol:time_span_from_json/1}, milliseconds)
    }.

-spec time_interval_to_xml(time_interval()) -> igor_xml:xml_element().

time_interval_to_xml(Record) ->
    #time_interval{
        visible = Visible,
        on_load = OnLoad,
        on_hover = OnHover,
        interval = Interval,
        mode = Mode
    } = Record,
    ?assert(Interval =/= undefined),
    ?assert(Mode =/= undefined),
    Content = igor_xml:pack_subelement('Visible', Visible, {option, {custom_element, fun zeus_igor_custom:binding_to_xml/1}})
    ++ igor_xml:pack_subelement('OnLoad', OnLoad, {option, {custom_element, fun zeus_shared_protocol:action_to_xml/1}})
    ++ igor_xml:pack_subelement('OnHover', OnHover, {option, {custom_element, fun zeus_shared_protocol:popup_to_xml/1}})
    ++ igor_xml:pack_subelement('Interval', Interval, {custom_element, fun zeus_igor_custom:binding_to_xml/1})
    ++ igor_xml:pack_subelement('Mode', Mode, {custom_simple_type, fun zeus_shared_protocol:time_span_to_xml/1}),
    #xmlElement{name = 'TimeInterval', content = Content}.

-spec time_interval_from_xml(igor_xml:xml_element()) -> time_interval().

time_interval_from_xml(XmlElement) ->
    'TimeInterval' = igor_xml:name(XmlElement),
    Visible = igor_xml:parse_subelement(XmlElement, 'Visible', {custom_element, fun zeus_igor_custom:binding_from_xml/1}, undefined),
    OnLoad = igor_xml:parse_subelement(XmlElement, 'OnLoad', {custom_element, fun zeus_shared_protocol:action_from_xml/1}, undefined),
    OnHover = igor_xml:parse_subelement(XmlElement, 'OnHover', {custom_element, fun zeus_shared_protocol:popup_from_xml/1}, undefined),
    Interval = igor_xml:parse_subelement(XmlElement, 'Interval', {custom_element, fun zeus_igor_custom:binding_from_xml/1}),
    Mode = igor_xml:parse_subelement(XmlElement, 'Mode', {custom_simple_type, fun zeus_shared_protocol:time_span_from_xml/1}, milliseconds),
    #time_interval{
        visible = Visible,
        on_load = OnLoad,
        on_hover = OnHover,
        interval = Interval,
        mode = Mode
    }.

-spec image_to_json(image()) -> igor_json:json_object().

image_to_json(Record) ->
    #image{
        visible = Visible,
        on_load = OnLoad,
        on_hover = OnHover,
        source = Source,
        on_click = OnClick,
        source_type = SourceType,
        scale = Scale
    } = Record,
    ?assert(Source =/= undefined),
    ?assert(SourceType =/= undefined),
    ?assert(Scale =/= undefined),
    #{
        <<"type">> => igor_json:pack(image, {custom, fun zeus_shared_protocol:element_type_to_json/1}),
        <<"visible">> => igor_json:pack(Visible, {custom, fun zeus_igor_custom:binding_to_json/1}),
        <<"on_load">> => igor_json:pack(OnLoad, {custom, fun zeus_shared_protocol:action_to_json/1}),
        <<"on_hover">> => igor_json:pack(OnHover, {custom, fun zeus_shared_protocol:popup_to_json/1}),
        <<"source">> => igor_json:pack(Source, {custom, fun zeus_igor_custom:binding_to_json/1}),
        <<"on_click">> => igor_json:pack(OnClick, {custom, fun zeus_shared_protocol:action_to_json/1}),
        <<"source_type">> => igor_json:pack(SourceType, {custom, fun zeus_shared_protocol:source_type_to_json/1}),
        <<"scale">> => igor_json:pack(Scale, boolean)
    }.

-spec image_from_json(igor_json:json_object()) -> image().

image_from_json(Json) ->
    #image{
        visible = igor_json:parse(Json, <<"visible">>, {custom, fun zeus_igor_custom:binding_from_json/1}, undefined),
        on_load = igor_json:parse(Json, <<"on_load">>, {custom, fun zeus_shared_protocol:action_from_json/1}, undefined),
        on_hover = igor_json:parse(Json, <<"on_hover">>, {custom, fun zeus_shared_protocol:popup_from_json/1}, undefined),
        source = igor_json:parse(Json, <<"source">>, {custom, fun zeus_igor_custom:binding_from_json/1}),
        on_click = igor_json:parse(Json, <<"on_click">>, {custom, fun zeus_shared_protocol:action_from_json/1}, undefined),
        source_type = igor_json:parse(Json, <<"source_type">>, {custom, fun zeus_shared_protocol:source_type_from_json/1}, instance),
        scale = igor_json:parse(Json, <<"scale">>, boolean, false)
    }.

-spec image_to_xml(image()) -> igor_xml:xml_element().

image_to_xml(Record) ->
    #image{
        visible = Visible,
        on_load = OnLoad,
        on_hover = OnHover,
        source = Source,
        on_click = OnClick,
        source_type = SourceType,
        scale = Scale
    } = Record,
    ?assert(Source =/= undefined),
    ?assert(SourceType =/= undefined),
    ?assert(Scale =/= undefined),
    Content = igor_xml:pack_subelement('Visible', Visible, {option, {custom_element, fun zeus_igor_custom:binding_to_xml/1}})
    ++ igor_xml:pack_subelement('OnLoad', OnLoad, {option, {custom_element, fun zeus_shared_protocol:action_to_xml/1}})
    ++ igor_xml:pack_subelement('OnHover', OnHover, {option, {custom_element, fun zeus_shared_protocol:popup_to_xml/1}})
    ++ igor_xml:pack_subelement('Source', Source, {custom_element, fun zeus_igor_custom:binding_to_xml/1})
    ++ igor_xml:pack_content(OnClick, {option, {custom_element, fun zeus_shared_protocol:action_to_xml/1}})
    ++ igor_xml:pack_subelement('SourceType', SourceType, {custom_simple_type, fun zeus_shared_protocol:source_type_to_xml/1})
    ++ igor_xml:pack_subelement('Scale', Scale, boolean),
    #xmlElement{name = 'Image', content = Content}.

-spec image_from_xml(igor_xml:xml_element()) -> image().

image_from_xml(XmlElement) ->
    'Image' = igor_xml:name(XmlElement),
    Visible = igor_xml:parse_subelement(XmlElement, 'Visible', {custom_element, fun zeus_igor_custom:binding_from_xml/1}, undefined),
    OnLoad = igor_xml:parse_subelement(XmlElement, 'OnLoad', {custom_element, fun zeus_shared_protocol:action_from_xml/1}, undefined),
    OnHover = igor_xml:parse_subelement(XmlElement, 'OnHover', {custom_element, fun zeus_shared_protocol:popup_from_xml/1}, undefined),
    Source = igor_xml:parse_subelement(XmlElement, 'Source', {custom_element, fun zeus_igor_custom:binding_from_xml/1}),
    OnClick = igor_xml:parse_content(igor_xml:content(XmlElement), {custom_element, fun zeus_shared_protocol:action_from_xml/1}, undefined),
    SourceType = igor_xml:parse_subelement(XmlElement, 'SourceType', {custom_simple_type, fun zeus_shared_protocol:source_type_from_xml/1}, instance),
    Scale = igor_xml:parse_subelement(XmlElement, 'Scale', boolean, false),
    #image{
        visible = Visible,
        on_load = OnLoad,
        on_hover = OnHover,
        source = Source,
        on_click = OnClick,
        source_type = SourceType,
        scale = Scale
    }.

-spec chart_to_json(chart()) -> igor_json:json_object().

chart_to_json(Record) ->
    #chart{
        visible = Visible,
        on_load = OnLoad,
        on_hover = OnHover,
        caption = Caption,
        source = Source,
        chart_type = ChartType,
        series = Series,
        flat = Flat
    } = Record,
    ?assert(Source =/= undefined),
    ?assert(ChartType =/= undefined),
    ?assert(Series =/= undefined),
    ?assert(Flat =/= undefined),
    #{
        <<"type">> => igor_json:pack(chart, {custom, fun zeus_shared_protocol:element_type_to_json/1}),
        <<"visible">> => igor_json:pack(Visible, {custom, fun zeus_igor_custom:binding_to_json/1}),
        <<"on_load">> => igor_json:pack(OnLoad, {custom, fun zeus_shared_protocol:action_to_json/1}),
        <<"on_hover">> => igor_json:pack(OnHover, {custom, fun zeus_shared_protocol:popup_to_json/1}),
        <<"caption">> => igor_json:pack(Caption, {custom, fun zeus_igor_custom:binding_to_json/1}),
        <<"source">> => igor_json:pack(Source, {custom, fun zeus_igor_custom:binding_to_json/1}),
        <<"chart_type">> => igor_json:pack(ChartType, {custom, fun zeus_shared_protocol:chart_type_to_json/1}),
        <<"series">> => igor_json:pack(Series, {list, {custom, fun zeus_igor_custom:binding_to_json/1}}),
        <<"flat">> => igor_json:pack(Flat, boolean)
    }.

-spec chart_from_json(igor_json:json_object()) -> chart().

chart_from_json(Json) ->
    #chart{
        visible = igor_json:parse(Json, <<"visible">>, {custom, fun zeus_igor_custom:binding_from_json/1}, undefined),
        on_load = igor_json:parse(Json, <<"on_load">>, {custom, fun zeus_shared_protocol:action_from_json/1}, undefined),
        on_hover = igor_json:parse(Json, <<"on_hover">>, {custom, fun zeus_shared_protocol:popup_from_json/1}, undefined),
        caption = igor_json:parse(Json, <<"caption">>, {custom, fun zeus_igor_custom:binding_from_json/1}, undefined),
        source = igor_json:parse(Json, <<"source">>, {custom, fun zeus_igor_custom:binding_from_json/1}),
        chart_type = igor_json:parse(Json, <<"chart_type">>, {custom, fun zeus_shared_protocol:chart_type_from_json/1}, bar),
        series = igor_json:parse(Json, <<"series">>, {list, {custom, fun zeus_igor_custom:binding_from_json/1}}),
        flat = igor_json:parse(Json, <<"flat">>, boolean, false)
    }.

-spec chart_to_xml(chart()) -> igor_xml:xml_element().

chart_to_xml(Record) ->
    #chart{
        visible = Visible,
        on_load = OnLoad,
        on_hover = OnHover,
        caption = Caption,
        source = Source,
        chart_type = ChartType,
        series = Series,
        flat = Flat
    } = Record,
    ?assert(Source =/= undefined),
    ?assert(ChartType =/= undefined),
    ?assert(Series =/= undefined),
    ?assert(Flat =/= undefined),
    Content = igor_xml:pack_subelement('Visible', Visible, {option, {custom_element, fun zeus_igor_custom:binding_to_xml/1}})
    ++ igor_xml:pack_subelement('OnLoad', OnLoad, {option, {custom_element, fun zeus_shared_protocol:action_to_xml/1}})
    ++ igor_xml:pack_subelement('OnHover', OnHover, {option, {custom_element, fun zeus_shared_protocol:popup_to_xml/1}})
    ++ igor_xml:pack_subelement('Caption', Caption, {option, {custom_element, fun zeus_igor_custom:binding_to_xml/1}})
    ++ igor_xml:pack_subelement('Source', Source, {custom_element, fun zeus_igor_custom:binding_to_xml/1})
    ++ igor_xml:pack_subelement('ChartType', ChartType, {custom_simple_type, fun zeus_shared_protocol:chart_type_to_xml/1})
    ++ igor_xml:pack_subelement('Series', Series, {list, {custom_element, fun zeus_igor_custom:binding_to_xml/1}})
    ++ igor_xml:pack_subelement('Flat', Flat, boolean),
    #xmlElement{name = 'Chart', content = Content}.

-spec chart_from_xml(igor_xml:xml_element()) -> chart().

chart_from_xml(XmlElement) ->
    'Chart' = igor_xml:name(XmlElement),
    Visible = igor_xml:parse_subelement(XmlElement, 'Visible', {custom_element, fun zeus_igor_custom:binding_from_xml/1}, undefined),
    OnLoad = igor_xml:parse_subelement(XmlElement, 'OnLoad', {custom_element, fun zeus_shared_protocol:action_from_xml/1}, undefined),
    OnHover = igor_xml:parse_subelement(XmlElement, 'OnHover', {custom_element, fun zeus_shared_protocol:popup_from_xml/1}, undefined),
    Caption = igor_xml:parse_subelement(XmlElement, 'Caption', {custom_element, fun zeus_igor_custom:binding_from_xml/1}, undefined),
    Source = igor_xml:parse_subelement(XmlElement, 'Source', {custom_element, fun zeus_igor_custom:binding_from_xml/1}),
    ChartType = igor_xml:parse_subelement(XmlElement, 'ChartType', {custom_simple_type, fun zeus_shared_protocol:chart_type_from_xml/1}, bar),
    Series = igor_xml:parse_subelement(XmlElement, 'Series', {list, {custom_element, fun zeus_igor_custom:binding_from_xml/1}}),
    Flat = igor_xml:parse_subelement(XmlElement, 'Flat', boolean, false),
    #chart{
        visible = Visible,
        on_load = OnLoad,
        on_hover = OnHover,
        caption = Caption,
        source = Source,
        chart_type = ChartType,
        series = Series,
        flat = Flat
    }.

-spec image_button_to_json(image_button()) -> igor_json:json_object().

image_button_to_json(Record) ->
    #image_button{
        visible = Visible,
        on_load = OnLoad,
        on_hover = OnHover,
        icon = Icon,
        tooltip = Tooltip,
        on_click = OnClick
    } = Record,
    ?assert(Icon =/= undefined),
    ?assert(OnClick =/= undefined),
    #{
        <<"type">> => igor_json:pack(imagebutton, {custom, fun zeus_shared_protocol:element_type_to_json/1}),
        <<"visible">> => igor_json:pack(Visible, {custom, fun zeus_igor_custom:binding_to_json/1}),
        <<"on_load">> => igor_json:pack(OnLoad, {custom, fun zeus_shared_protocol:action_to_json/1}),
        <<"on_hover">> => igor_json:pack(OnHover, {custom, fun zeus_shared_protocol:popup_to_json/1}),
        <<"icon">> => igor_json:pack(Icon, {custom, fun zeus_igor_custom:binding_to_json/1}),
        <<"tooltip">> => igor_json:pack(Tooltip, {custom, fun zeus_igor_custom:binding_to_json/1}),
        <<"on_click">> => igor_json:pack(OnClick, {custom, fun zeus_shared_protocol:action_to_json/1})
    }.

-spec image_button_from_json(igor_json:json_object()) -> image_button().

image_button_from_json(Json) ->
    #image_button{
        visible = igor_json:parse(Json, <<"visible">>, {custom, fun zeus_igor_custom:binding_from_json/1}, undefined),
        on_load = igor_json:parse(Json, <<"on_load">>, {custom, fun zeus_shared_protocol:action_from_json/1}, undefined),
        on_hover = igor_json:parse(Json, <<"on_hover">>, {custom, fun zeus_shared_protocol:popup_from_json/1}, undefined),
        icon = igor_json:parse(Json, <<"icon">>, {custom, fun zeus_igor_custom:binding_from_json/1}),
        tooltip = igor_json:parse(Json, <<"tooltip">>, {custom, fun zeus_igor_custom:binding_from_json/1}, undefined),
        on_click = igor_json:parse(Json, <<"on_click">>, {custom, fun zeus_shared_protocol:action_from_json/1})
    }.

-spec image_button_to_xml(image_button()) -> igor_xml:xml_element().

image_button_to_xml(Record) ->
    #image_button{
        visible = Visible,
        on_load = OnLoad,
        on_hover = OnHover,
        icon = Icon,
        tooltip = Tooltip,
        on_click = OnClick
    } = Record,
    ?assert(Icon =/= undefined),
    ?assert(OnClick =/= undefined),
    Content = igor_xml:pack_subelement('Visible', Visible, {option, {custom_element, fun zeus_igor_custom:binding_to_xml/1}})
    ++ igor_xml:pack_subelement('OnLoad', OnLoad, {option, {custom_element, fun zeus_shared_protocol:action_to_xml/1}})
    ++ igor_xml:pack_subelement('OnHover', OnHover, {option, {custom_element, fun zeus_shared_protocol:popup_to_xml/1}})
    ++ igor_xml:pack_subelement('Icon', Icon, {custom_element, fun zeus_igor_custom:binding_to_xml/1})
    ++ igor_xml:pack_subelement('Tooltip', Tooltip, {option, {custom_element, fun zeus_igor_custom:binding_to_xml/1}})
    ++ igor_xml:pack_content(OnClick, {custom_element, fun zeus_shared_protocol:action_to_xml/1}),
    #xmlElement{name = 'ImageButton', content = Content}.

-spec image_button_from_xml(igor_xml:xml_element()) -> image_button().

image_button_from_xml(XmlElement) ->
    'ImageButton' = igor_xml:name(XmlElement),
    Visible = igor_xml:parse_subelement(XmlElement, 'Visible', {custom_element, fun zeus_igor_custom:binding_from_xml/1}, undefined),
    OnLoad = igor_xml:parse_subelement(XmlElement, 'OnLoad', {custom_element, fun zeus_shared_protocol:action_from_xml/1}, undefined),
    OnHover = igor_xml:parse_subelement(XmlElement, 'OnHover', {custom_element, fun zeus_shared_protocol:popup_from_xml/1}, undefined),
    Icon = igor_xml:parse_subelement(XmlElement, 'Icon', {custom_element, fun zeus_igor_custom:binding_from_xml/1}),
    Tooltip = igor_xml:parse_subelement(XmlElement, 'Tooltip', {custom_element, fun zeus_igor_custom:binding_from_xml/1}, undefined),
    OnClick = igor_xml:parse_content(igor_xml:content(XmlElement), {custom_element, fun zeus_shared_protocol:action_from_xml/1}),
    #image_button{
        visible = Visible,
        on_load = OnLoad,
        on_hover = OnHover,
        icon = Icon,
        tooltip = Tooltip,
        on_click = OnClick
    }.

-spec checkbox_to_json(checkbox()) -> igor_json:json_object().

checkbox_to_json(Record) ->
    #checkbox{
        visible = Visible,
        on_load = OnLoad,
        on_hover = OnHover,
        checked = Checked,
        text = Text,
        color = Color,
        on_change = OnChange
    } = Record,
    ?assert(Checked =/= undefined),
    ?assert(Text =/= undefined),
    ?assert(OnChange =/= undefined),
    #{
        <<"type">> => igor_json:pack(checkbox, {custom, fun zeus_shared_protocol:element_type_to_json/1}),
        <<"visible">> => igor_json:pack(Visible, {custom, fun zeus_igor_custom:binding_to_json/1}),
        <<"on_load">> => igor_json:pack(OnLoad, {custom, fun zeus_shared_protocol:action_to_json/1}),
        <<"on_hover">> => igor_json:pack(OnHover, {custom, fun zeus_shared_protocol:popup_to_json/1}),
        <<"checked">> => igor_json:pack(Checked, {custom, fun zeus_igor_custom:binding_to_json/1}),
        <<"text">> => igor_json:pack(Text, {custom, fun zeus_igor_custom:binding_to_json/1}),
        <<"color">> => igor_json:pack(Color, {custom, fun zeus_igor_custom:binding_to_json/1}),
        <<"on_change">> => igor_json:pack(OnChange, {custom, fun zeus_shared_protocol:action_to_json/1})
    }.

-spec checkbox_from_json(igor_json:json_object()) -> checkbox().

checkbox_from_json(Json) ->
    #checkbox{
        visible = igor_json:parse(Json, <<"visible">>, {custom, fun zeus_igor_custom:binding_from_json/1}, undefined),
        on_load = igor_json:parse(Json, <<"on_load">>, {custom, fun zeus_shared_protocol:action_from_json/1}, undefined),
        on_hover = igor_json:parse(Json, <<"on_hover">>, {custom, fun zeus_shared_protocol:popup_from_json/1}, undefined),
        checked = igor_json:parse(Json, <<"checked">>, {custom, fun zeus_igor_custom:binding_from_json/1}),
        text = igor_json:parse(Json, <<"text">>, {custom, fun zeus_igor_custom:binding_from_json/1}),
        color = igor_json:parse(Json, <<"color">>, {custom, fun zeus_igor_custom:binding_from_json/1}, undefined),
        on_change = igor_json:parse(Json, <<"on_change">>, {custom, fun zeus_shared_protocol:action_from_json/1})
    }.

-spec checkbox_to_xml(checkbox()) -> igor_xml:xml_element().

checkbox_to_xml(Record) ->
    #checkbox{
        visible = Visible,
        on_load = OnLoad,
        on_hover = OnHover,
        checked = Checked,
        text = Text,
        color = Color,
        on_change = OnChange
    } = Record,
    ?assert(Checked =/= undefined),
    ?assert(Text =/= undefined),
    ?assert(OnChange =/= undefined),
    Content = igor_xml:pack_subelement('Visible', Visible, {option, {custom_element, fun zeus_igor_custom:binding_to_xml/1}})
    ++ igor_xml:pack_subelement('OnLoad', OnLoad, {option, {custom_element, fun zeus_shared_protocol:action_to_xml/1}})
    ++ igor_xml:pack_subelement('OnHover', OnHover, {option, {custom_element, fun zeus_shared_protocol:popup_to_xml/1}})
    ++ igor_xml:pack_subelement('Checked', Checked, {custom_element, fun zeus_igor_custom:binding_to_xml/1})
    ++ igor_xml:pack_subelement('Text', Text, {custom_element, fun zeus_igor_custom:binding_to_xml/1})
    ++ igor_xml:pack_subelement('Color', Color, {option, {custom_element, fun zeus_igor_custom:binding_to_xml/1}})
    ++ igor_xml:pack_content(OnChange, {custom_element, fun zeus_shared_protocol:action_to_xml/1}),
    #xmlElement{name = 'Checkbox', content = Content}.

-spec checkbox_from_xml(igor_xml:xml_element()) -> checkbox().

checkbox_from_xml(XmlElement) ->
    'Checkbox' = igor_xml:name(XmlElement),
    Visible = igor_xml:parse_subelement(XmlElement, 'Visible', {custom_element, fun zeus_igor_custom:binding_from_xml/1}, undefined),
    OnLoad = igor_xml:parse_subelement(XmlElement, 'OnLoad', {custom_element, fun zeus_shared_protocol:action_from_xml/1}, undefined),
    OnHover = igor_xml:parse_subelement(XmlElement, 'OnHover', {custom_element, fun zeus_shared_protocol:popup_from_xml/1}, undefined),
    Checked = igor_xml:parse_subelement(XmlElement, 'Checked', {custom_element, fun zeus_igor_custom:binding_from_xml/1}),
    Text = igor_xml:parse_subelement(XmlElement, 'Text', {custom_element, fun zeus_igor_custom:binding_from_xml/1}),
    Color = igor_xml:parse_subelement(XmlElement, 'Color', {custom_element, fun zeus_igor_custom:binding_from_xml/1}, undefined),
    OnChange = igor_xml:parse_content(igor_xml:content(XmlElement), {custom_element, fun zeus_shared_protocol:action_from_xml/1}),
    #checkbox{
        visible = Visible,
        on_load = OnLoad,
        on_hover = OnHover,
        checked = Checked,
        text = Text,
        color = Color,
        on_change = OnChange
    }.

-spec combobox_to_json(combobox()) -> igor_json:json_object().

combobox_to_json(Record) ->
    #combobox{
        visible = Visible,
        on_load = OnLoad,
        on_hover = OnHover,
        items = Items,
        caption = Caption,
        selected = Selected,
        on_change = OnChange
    } = Record,
    ?assert(Items =/= undefined),
    ?assert(Caption =/= undefined),
    ?assert(Selected =/= undefined),
    ?assert(OnChange =/= undefined),
    #{
        <<"type">> => igor_json:pack(combobox, {custom, fun zeus_shared_protocol:element_type_to_json/1}),
        <<"visible">> => igor_json:pack(Visible, {custom, fun zeus_igor_custom:binding_to_json/1}),
        <<"on_load">> => igor_json:pack(OnLoad, {custom, fun zeus_shared_protocol:action_to_json/1}),
        <<"on_hover">> => igor_json:pack(OnHover, {custom, fun zeus_shared_protocol:popup_to_json/1}),
        <<"items">> => igor_json:pack(Items, {custom, fun zeus_igor_custom:binding_to_json/1}),
        <<"caption">> => igor_json:pack(Caption, {custom, fun zeus_igor_custom:binding_to_json/1}),
        <<"selected">> => igor_json:pack(Selected, {custom, fun zeus_igor_custom:binding_to_json/1}),
        <<"on_change">> => igor_json:pack(OnChange, {custom, fun zeus_shared_protocol:action_to_json/1})
    }.

-spec combobox_from_json(igor_json:json_object()) -> combobox().

combobox_from_json(Json) ->
    #combobox{
        visible = igor_json:parse(Json, <<"visible">>, {custom, fun zeus_igor_custom:binding_from_json/1}, undefined),
        on_load = igor_json:parse(Json, <<"on_load">>, {custom, fun zeus_shared_protocol:action_from_json/1}, undefined),
        on_hover = igor_json:parse(Json, <<"on_hover">>, {custom, fun zeus_shared_protocol:popup_from_json/1}, undefined),
        items = igor_json:parse(Json, <<"items">>, {custom, fun zeus_igor_custom:binding_from_json/1}),
        caption = igor_json:parse(Json, <<"caption">>, {custom, fun zeus_igor_custom:binding_from_json/1}),
        selected = igor_json:parse(Json, <<"selected">>, {custom, fun zeus_igor_custom:binding_from_json/1}),
        on_change = igor_json:parse(Json, <<"on_change">>, {custom, fun zeus_shared_protocol:action_from_json/1})
    }.

-spec combobox_to_xml(combobox()) -> igor_xml:xml_element().

combobox_to_xml(Record) ->
    #combobox{
        visible = Visible,
        on_load = OnLoad,
        on_hover = OnHover,
        items = Items,
        caption = Caption,
        selected = Selected,
        on_change = OnChange
    } = Record,
    ?assert(Items =/= undefined),
    ?assert(Caption =/= undefined),
    ?assert(Selected =/= undefined),
    ?assert(OnChange =/= undefined),
    Content = igor_xml:pack_subelement('Visible', Visible, {option, {custom_element, fun zeus_igor_custom:binding_to_xml/1}})
    ++ igor_xml:pack_subelement('OnLoad', OnLoad, {option, {custom_element, fun zeus_shared_protocol:action_to_xml/1}})
    ++ igor_xml:pack_subelement('OnHover', OnHover, {option, {custom_element, fun zeus_shared_protocol:popup_to_xml/1}})
    ++ igor_xml:pack_subelement('Items', Items, {custom_element, fun zeus_igor_custom:binding_to_xml/1})
    ++ igor_xml:pack_subelement('Caption', Caption, {custom_element, fun zeus_igor_custom:binding_to_xml/1})
    ++ igor_xml:pack_subelement('Selected', Selected, {custom_element, fun zeus_igor_custom:binding_to_xml/1})
    ++ igor_xml:pack_content(OnChange, {custom_element, fun zeus_shared_protocol:action_to_xml/1}),
    #xmlElement{name = 'Combobox', content = Content}.

-spec combobox_from_xml(igor_xml:xml_element()) -> combobox().

combobox_from_xml(XmlElement) ->
    'Combobox' = igor_xml:name(XmlElement),
    Visible = igor_xml:parse_subelement(XmlElement, 'Visible', {custom_element, fun zeus_igor_custom:binding_from_xml/1}, undefined),
    OnLoad = igor_xml:parse_subelement(XmlElement, 'OnLoad', {custom_element, fun zeus_shared_protocol:action_from_xml/1}, undefined),
    OnHover = igor_xml:parse_subelement(XmlElement, 'OnHover', {custom_element, fun zeus_shared_protocol:popup_from_xml/1}, undefined),
    Items = igor_xml:parse_subelement(XmlElement, 'Items', {custom_element, fun zeus_igor_custom:binding_from_xml/1}),
    Caption = igor_xml:parse_subelement(XmlElement, 'Caption', {custom_element, fun zeus_igor_custom:binding_from_xml/1}),
    Selected = igor_xml:parse_subelement(XmlElement, 'Selected', {custom_element, fun zeus_igor_custom:binding_from_xml/1}),
    OnChange = igor_xml:parse_content(igor_xml:content(XmlElement), {custom_element, fun zeus_shared_protocol:action_from_xml/1}),
    #combobox{
        visible = Visible,
        on_load = OnLoad,
        on_hover = OnHover,
        items = Items,
        caption = Caption,
        selected = Selected,
        on_change = OnChange
    }.

-spec inplace_text_edit_to_json(inplace_text_edit()) -> igor_json:json_object().

inplace_text_edit_to_json(Record) ->
    #inplace_text_edit{
        visible = Visible,
        on_load = OnLoad,
        on_hover = OnHover,
        text = Text,
        on_change = OnChange
    } = Record,
    ?assert(Text =/= undefined),
    ?assert(OnChange =/= undefined),
    #{
        <<"type">> => igor_json:pack(inplace_textedit, {custom, fun zeus_shared_protocol:element_type_to_json/1}),
        <<"visible">> => igor_json:pack(Visible, {custom, fun zeus_igor_custom:binding_to_json/1}),
        <<"on_load">> => igor_json:pack(OnLoad, {custom, fun zeus_shared_protocol:action_to_json/1}),
        <<"on_hover">> => igor_json:pack(OnHover, {custom, fun zeus_shared_protocol:popup_to_json/1}),
        <<"text">> => igor_json:pack(Text, {custom, fun zeus_igor_custom:binding_to_json/1}),
        <<"on_change">> => igor_json:pack(OnChange, {custom, fun zeus_shared_protocol:action_to_json/1})
    }.

-spec inplace_text_edit_from_json(igor_json:json_object()) -> inplace_text_edit().

inplace_text_edit_from_json(Json) ->
    #inplace_text_edit{
        visible = igor_json:parse(Json, <<"visible">>, {custom, fun zeus_igor_custom:binding_from_json/1}, undefined),
        on_load = igor_json:parse(Json, <<"on_load">>, {custom, fun zeus_shared_protocol:action_from_json/1}, undefined),
        on_hover = igor_json:parse(Json, <<"on_hover">>, {custom, fun zeus_shared_protocol:popup_from_json/1}, undefined),
        text = igor_json:parse(Json, <<"text">>, {custom, fun zeus_igor_custom:binding_from_json/1}),
        on_change = igor_json:parse(Json, <<"on_change">>, {custom, fun zeus_shared_protocol:action_from_json/1})
    }.

-spec inplace_text_edit_to_xml(inplace_text_edit()) -> igor_xml:xml_element().

inplace_text_edit_to_xml(Record) ->
    #inplace_text_edit{
        visible = Visible,
        on_load = OnLoad,
        on_hover = OnHover,
        text = Text,
        on_change = OnChange
    } = Record,
    ?assert(Text =/= undefined),
    ?assert(OnChange =/= undefined),
    Content = igor_xml:pack_subelement('Visible', Visible, {option, {custom_element, fun zeus_igor_custom:binding_to_xml/1}})
    ++ igor_xml:pack_subelement('OnLoad', OnLoad, {option, {custom_element, fun zeus_shared_protocol:action_to_xml/1}})
    ++ igor_xml:pack_subelement('OnHover', OnHover, {option, {custom_element, fun zeus_shared_protocol:popup_to_xml/1}})
    ++ igor_xml:pack_subelement('Text', Text, {custom_element, fun zeus_igor_custom:binding_to_xml/1})
    ++ igor_xml:pack_content(OnChange, {custom_element, fun zeus_shared_protocol:action_to_xml/1}),
    #xmlElement{name = 'InplaceTextEdit', content = Content}.

-spec inplace_text_edit_from_xml(igor_xml:xml_element()) -> inplace_text_edit().

inplace_text_edit_from_xml(XmlElement) ->
    'InplaceTextEdit' = igor_xml:name(XmlElement),
    Visible = igor_xml:parse_subelement(XmlElement, 'Visible', {custom_element, fun zeus_igor_custom:binding_from_xml/1}, undefined),
    OnLoad = igor_xml:parse_subelement(XmlElement, 'OnLoad', {custom_element, fun zeus_shared_protocol:action_from_xml/1}, undefined),
    OnHover = igor_xml:parse_subelement(XmlElement, 'OnHover', {custom_element, fun zeus_shared_protocol:popup_from_xml/1}, undefined),
    Text = igor_xml:parse_subelement(XmlElement, 'Text', {custom_element, fun zeus_igor_custom:binding_from_xml/1}),
    OnChange = igor_xml:parse_content(igor_xml:content(XmlElement), {custom_element, fun zeus_shared_protocol:action_from_xml/1}),
    #inplace_text_edit{
        visible = Visible,
        on_load = OnLoad,
        on_hover = OnHover,
        text = Text,
        on_change = OnChange
    }.

-spec separator_to_json(separator()) -> igor_json:json_object().

separator_to_json(Record) ->
    #separator{visible = Visible, on_load = OnLoad, on_hover = OnHover} = Record,
    #{
        <<"type">> => igor_json:pack(separator, {custom, fun zeus_shared_protocol:element_type_to_json/1}),
        <<"visible">> => igor_json:pack(Visible, {custom, fun zeus_igor_custom:binding_to_json/1}),
        <<"on_load">> => igor_json:pack(OnLoad, {custom, fun zeus_shared_protocol:action_to_json/1}),
        <<"on_hover">> => igor_json:pack(OnHover, {custom, fun zeus_shared_protocol:popup_to_json/1})
    }.

-spec separator_from_json(igor_json:json_object()) -> separator().

separator_from_json(Json) ->
    #separator{
        visible = igor_json:parse(Json, <<"visible">>, {custom, fun zeus_igor_custom:binding_from_json/1}, undefined),
        on_load = igor_json:parse(Json, <<"on_load">>, {custom, fun zeus_shared_protocol:action_from_json/1}, undefined),
        on_hover = igor_json:parse(Json, <<"on_hover">>, {custom, fun zeus_shared_protocol:popup_from_json/1}, undefined)
    }.

-spec separator_to_xml(separator()) -> igor_xml:xml_element().

separator_to_xml(Record) ->
    #separator{visible = Visible, on_load = OnLoad, on_hover = OnHover} = Record,
    Content = igor_xml:pack_subelement('Visible', Visible, {option, {custom_element, fun zeus_igor_custom:binding_to_xml/1}})
    ++ igor_xml:pack_subelement('OnLoad', OnLoad, {option, {custom_element, fun zeus_shared_protocol:action_to_xml/1}})
    ++ igor_xml:pack_subelement('OnHover', OnHover, {option, {custom_element, fun zeus_shared_protocol:popup_to_xml/1}}),
    #xmlElement{name = 'Separator', content = Content}.

-spec separator_from_xml(igor_xml:xml_element()) -> separator().

separator_from_xml(XmlElement) ->
    'Separator' = igor_xml:name(XmlElement),
    Visible = igor_xml:parse_subelement(XmlElement, 'Visible', {custom_element, fun zeus_igor_custom:binding_from_xml/1}, undefined),
    OnLoad = igor_xml:parse_subelement(XmlElement, 'OnLoad', {custom_element, fun zeus_shared_protocol:action_from_xml/1}, undefined),
    OnHover = igor_xml:parse_subelement(XmlElement, 'OnHover', {custom_element, fun zeus_shared_protocol:popup_from_xml/1}, undefined),
    #separator{visible = Visible, on_load = OnLoad, on_hover = OnHover}.

-spec html_to_json(html()) -> igor_json:json_object().

html_to_json(Record) ->
    #html{
        visible = Visible,
        on_load = OnLoad,
        on_hover = OnHover,
        content = VarContent
    } = Record,
    ?assert(VarContent =/= undefined),
    #{
        <<"type">> => igor_json:pack(html, {custom, fun zeus_shared_protocol:element_type_to_json/1}),
        <<"visible">> => igor_json:pack(Visible, {custom, fun zeus_igor_custom:binding_to_json/1}),
        <<"on_load">> => igor_json:pack(OnLoad, {custom, fun zeus_shared_protocol:action_to_json/1}),
        <<"on_hover">> => igor_json:pack(OnHover, {custom, fun zeus_shared_protocol:popup_to_json/1}),
        <<"content">> => igor_json:pack(VarContent, {custom, fun zeus_igor_custom:binding_to_json/1})
    }.

-spec html_from_json(igor_json:json_object()) -> html().

html_from_json(Json) ->
    #html{
        visible = igor_json:parse(Json, <<"visible">>, {custom, fun zeus_igor_custom:binding_from_json/1}, undefined),
        on_load = igor_json:parse(Json, <<"on_load">>, {custom, fun zeus_shared_protocol:action_from_json/1}, undefined),
        on_hover = igor_json:parse(Json, <<"on_hover">>, {custom, fun zeus_shared_protocol:popup_from_json/1}, undefined),
        content = igor_json:parse(Json, <<"content">>, {custom, fun zeus_igor_custom:binding_from_json/1})
    }.

-spec html_to_xml(html()) -> igor_xml:xml_element().

html_to_xml(Record) ->
    #html{
        visible = Visible,
        on_load = OnLoad,
        on_hover = OnHover,
        content = VarContent
    } = Record,
    ?assert(VarContent =/= undefined),
    Content = igor_xml:pack_subelement('Visible', Visible, {option, {custom_element, fun zeus_igor_custom:binding_to_xml/1}})
    ++ igor_xml:pack_subelement('OnLoad', OnLoad, {option, {custom_element, fun zeus_shared_protocol:action_to_xml/1}})
    ++ igor_xml:pack_subelement('OnHover', OnHover, {option, {custom_element, fun zeus_shared_protocol:popup_to_xml/1}})
    ++ igor_xml:pack_content(VarContent, {custom_element, fun zeus_igor_custom:binding_to_xml/1}),
    #xmlElement{name = 'Html', content = Content}.

-spec html_from_xml(igor_xml:xml_element()) -> html().

html_from_xml(XmlElement) ->
    'Html' = igor_xml:name(XmlElement),
    Visible = igor_xml:parse_subelement(XmlElement, 'Visible', {custom_element, fun zeus_igor_custom:binding_from_xml/1}, undefined),
    OnLoad = igor_xml:parse_subelement(XmlElement, 'OnLoad', {custom_element, fun zeus_shared_protocol:action_from_xml/1}, undefined),
    OnHover = igor_xml:parse_subelement(XmlElement, 'OnHover', {custom_element, fun zeus_shared_protocol:popup_from_xml/1}, undefined),
    VarContent = igor_xml:parse_content(igor_xml:content(XmlElement), {custom_element, fun zeus_igor_custom:binding_from_xml/1}),
    #html{
        visible = Visible,
        on_load = OnLoad,
        on_hover = OnHover,
        content = VarContent
    }.

-spec tab_item_to_json(tab_item()) -> igor_json:json_object().

tab_item_to_json(Record) ->
    #tab_item{
        title = Title,
        icon = Icon,
        layout_url = LayoutUrl,
        data_url = DataUrl,
        is_websocket = IsWebsocket
    } = Record,
    ?assert(Title =/= undefined),
    ?assert(Icon =/= undefined),
    ?assert(LayoutUrl =/= undefined),
    ?assert(IsWebsocket =/= undefined),
    #{
        <<"title">> => igor_json:pack(Title, string),
        <<"icon">> => igor_json:pack(Icon, string),
        <<"layout_url">> => igor_json:pack(LayoutUrl, string),
        <<"data_url">> => igor_json:pack(DataUrl, string),
        <<"is_websocket">> => igor_json:pack(IsWebsocket, boolean)
    }.

-spec tab_item_from_json(igor_json:json_object()) -> tab_item().

tab_item_from_json(Json) ->
    #tab_item{
        title = igor_json:parse(Json, <<"title">>, string),
        icon = igor_json:parse(Json, <<"icon">>, string, <<"icon-info-sign">>),
        layout_url = igor_json:parse(Json, <<"layout_url">>, string),
        data_url = igor_json:parse(Json, <<"data_url">>, string, undefined),
        is_websocket = igor_json:parse(Json, <<"is_websocket">>, boolean, false)
    }.

-spec tab_item_to_xml(tab_item()) -> igor_xml:xml_element().

tab_item_to_xml(Record) ->
    #tab_item{
        title = Title,
        icon = Icon,
        layout_url = LayoutUrl,
        data_url = DataUrl,
        is_websocket = IsWebsocket
    } = Record,
    ?assert(Title =/= undefined),
    ?assert(Icon =/= undefined),
    ?assert(LayoutUrl =/= undefined),
    ?assert(IsWebsocket =/= undefined),
    Content = igor_xml:pack_subelement('Title', Title, string)
    ++ igor_xml:pack_subelement('Icon', Icon, string)
    ++ igor_xml:pack_subelement('LayoutUrl', LayoutUrl, string)
    ++ igor_xml:pack_subelement('DataUrl', DataUrl, {option, string})
    ++ igor_xml:pack_subelement('IsWebsocket', IsWebsocket, boolean),
    #xmlElement{name = 'TabItem', content = Content}.

-spec tab_item_from_xml(igor_xml:xml_element()) -> tab_item().

tab_item_from_xml(XmlElement) ->
    'TabItem' = igor_xml:name(XmlElement),
    Title = igor_xml:parse_subelement(XmlElement, 'Title', string),
    Icon = igor_xml:parse_subelement(XmlElement, 'Icon', string, <<"icon-info-sign">>),
    LayoutUrl = igor_xml:parse_subelement(XmlElement, 'LayoutUrl', string),
    DataUrl = igor_xml:parse_subelement(XmlElement, 'DataUrl', string, undefined),
    IsWebsocket = igor_xml:parse_subelement(XmlElement, 'IsWebsocket', boolean, false),
    #tab_item{
        title = Title,
        icon = Icon,
        layout_url = LayoutUrl,
        data_url = DataUrl,
        is_websocket = IsWebsocket
    }.

-spec tabs_to_json(tabs()) -> igor_json:json_object().

tabs_to_json(Record) ->
    #tabs{
        visible = Visible,
        on_load = OnLoad,
        on_hover = OnHover,
        items = Items
    } = Record,
    ?assert(Items =/= undefined),
    #{
        <<"type">> => igor_json:pack(tabs, {custom, fun zeus_shared_protocol:element_type_to_json/1}),
        <<"visible">> => igor_json:pack(Visible, {custom, fun zeus_igor_custom:binding_to_json/1}),
        <<"on_load">> => igor_json:pack(OnLoad, {custom, fun zeus_shared_protocol:action_to_json/1}),
        <<"on_hover">> => igor_json:pack(OnHover, {custom, fun zeus_shared_protocol:popup_to_json/1}),
        <<"items">> => igor_json:pack(Items, {list, {custom, fun zeus_shared_protocol:tab_item_to_json/1}})
    }.

-spec tabs_from_json(igor_json:json_object()) -> tabs().

tabs_from_json(Json) ->
    #tabs{
        visible = igor_json:parse(Json, <<"visible">>, {custom, fun zeus_igor_custom:binding_from_json/1}, undefined),
        on_load = igor_json:parse(Json, <<"on_load">>, {custom, fun zeus_shared_protocol:action_from_json/1}, undefined),
        on_hover = igor_json:parse(Json, <<"on_hover">>, {custom, fun zeus_shared_protocol:popup_from_json/1}, undefined),
        items = igor_json:parse(Json, <<"items">>, {list, {custom, fun zeus_shared_protocol:tab_item_from_json/1}}, [])
    }.

-spec tabs_to_xml(tabs()) -> igor_xml:xml_element().

tabs_to_xml(Record) ->
    #tabs{
        visible = Visible,
        on_load = OnLoad,
        on_hover = OnHover,
        items = Items
    } = Record,
    ?assert(Items =/= undefined),
    Content = igor_xml:pack_subelement('Visible', Visible, {option, {custom_element, fun zeus_igor_custom:binding_to_xml/1}})
    ++ igor_xml:pack_subelement('OnLoad', OnLoad, {option, {custom_element, fun zeus_shared_protocol:action_to_xml/1}})
    ++ igor_xml:pack_subelement('OnHover', OnHover, {option, {custom_element, fun zeus_shared_protocol:popup_to_xml/1}})
    ++ igor_xml:pack_content(Items, {list, {custom_element, fun zeus_shared_protocol:tab_item_to_xml/1}}),
    #xmlElement{name = 'Tabs', content = Content}.

-spec tabs_from_xml(igor_xml:xml_element()) -> tabs().

tabs_from_xml(XmlElement) ->
    'Tabs' = igor_xml:name(XmlElement),
    Visible = igor_xml:parse_subelement(XmlElement, 'Visible', {custom_element, fun zeus_igor_custom:binding_from_xml/1}, undefined),
    OnLoad = igor_xml:parse_subelement(XmlElement, 'OnLoad', {custom_element, fun zeus_shared_protocol:action_from_xml/1}, undefined),
    OnHover = igor_xml:parse_subelement(XmlElement, 'OnHover', {custom_element, fun zeus_shared_protocol:popup_from_xml/1}, undefined),
    Items = igor_xml:parse_content(igor_xml:content(XmlElement), {list, {custom_element, fun zeus_shared_protocol:tab_item_from_xml/1}}, []),
    #tabs{
        visible = Visible,
        on_load = OnLoad,
        on_hover = OnHover,
        items = Items
    }.

-spec radio_item_to_json(radio_item()) -> igor_json:json_object().

radio_item_to_json(Record) ->
    #radio_item{template = Template, caption = Caption, value = VarValue} = Record,
    ?assert(Caption =/= undefined),
    ?assert(VarValue =/= undefined),
    #{
        <<"template">> => igor_json:pack(Template, {custom, fun zeus_shared_protocol:element_to_json/1}),
        <<"caption">> => igor_json:pack(Caption, {custom, fun zeus_igor_custom:binding_to_json/1}),
        <<"value">> => igor_json:pack(VarValue, {custom, fun zeus_igor_custom:binding_to_json/1})
    }.

-spec radio_item_from_json(igor_json:json_object()) -> radio_item().

radio_item_from_json(Json) ->
    #radio_item{
        template = igor_json:parse(Json, <<"template">>, {custom, fun zeus_shared_protocol:element_from_json/1}, undefined),
        caption = igor_json:parse(Json, <<"caption">>, {custom, fun zeus_igor_custom:binding_from_json/1}),
        value = igor_json:parse(Json, <<"value">>, {custom, fun zeus_igor_custom:binding_from_json/1})
    }.

-spec radio_item_to_xml(radio_item()) -> igor_xml:xml_element().

radio_item_to_xml(Record) ->
    #radio_item{template = Template, caption = Caption, value = VarValue} = Record,
    ?assert(Caption =/= undefined),
    ?assert(VarValue =/= undefined),
    Content = igor_xml:pack_content(Template, {option, {custom_element, fun zeus_shared_protocol:element_to_xml/1}})
    ++ igor_xml:pack_subelement('Caption', Caption, {custom_element, fun zeus_igor_custom:binding_to_xml/1})
    ++ igor_xml:pack_subelement('Value', VarValue, {custom_element, fun zeus_igor_custom:binding_to_xml/1}),
    #xmlElement{name = 'RadioItem', content = Content}.

-spec radio_item_from_xml(igor_xml:xml_element()) -> radio_item().

radio_item_from_xml(XmlElement) ->
    'RadioItem' = igor_xml:name(XmlElement),
    Template = igor_xml:parse_content(igor_xml:content(XmlElement), {custom_element, fun zeus_shared_protocol:element_from_xml/1}, undefined),
    Caption = igor_xml:parse_subelement(XmlElement, 'Caption', {custom_element, fun zeus_igor_custom:binding_from_xml/1}),
    VarValue = igor_xml:parse_subelement(XmlElement, 'Value', {custom_element, fun zeus_igor_custom:binding_from_xml/1}),
    #radio_item{template = Template, caption = Caption, value = VarValue}.

-spec radiogroup_to_json(radiogroup()) -> igor_json:json_object().

radiogroup_to_json(Record) ->
    #radiogroup{
        visible = Visible,
        on_load = OnLoad,
        on_hover = OnHover,
        items = Items,
        vertical_order = VerticalOrder,
        value = VarValue
    } = Record,
    ?assert(Items =/= undefined),
    ?assert(VerticalOrder =/= undefined),
    ?assert(VarValue =/= undefined),
    #{
        <<"type">> => igor_json:pack(radiogroup, {custom, fun zeus_shared_protocol:element_type_to_json/1}),
        <<"visible">> => igor_json:pack(Visible, {custom, fun zeus_igor_custom:binding_to_json/1}),
        <<"on_load">> => igor_json:pack(OnLoad, {custom, fun zeus_shared_protocol:action_to_json/1}),
        <<"on_hover">> => igor_json:pack(OnHover, {custom, fun zeus_shared_protocol:popup_to_json/1}),
        <<"items">> => igor_json:pack(Items, {list, {custom, fun zeus_shared_protocol:radio_item_to_json/1}}),
        <<"vertical_order">> => igor_json:pack(VerticalOrder, boolean),
        <<"value">> => igor_json:pack(VarValue, {custom, fun zeus_igor_custom:binding_to_json/1})
    }.

-spec radiogroup_from_json(igor_json:json_object()) -> radiogroup().

radiogroup_from_json(Json) ->
    #radiogroup{
        visible = igor_json:parse(Json, <<"visible">>, {custom, fun zeus_igor_custom:binding_from_json/1}, undefined),
        on_load = igor_json:parse(Json, <<"on_load">>, {custom, fun zeus_shared_protocol:action_from_json/1}, undefined),
        on_hover = igor_json:parse(Json, <<"on_hover">>, {custom, fun zeus_shared_protocol:popup_from_json/1}, undefined),
        items = igor_json:parse(Json, <<"items">>, {list, {custom, fun zeus_shared_protocol:radio_item_from_json/1}}, []),
        vertical_order = igor_json:parse(Json, <<"vertical_order">>, boolean, true),
        value = igor_json:parse(Json, <<"value">>, {custom, fun zeus_igor_custom:binding_from_json/1})
    }.

-spec radiogroup_to_xml(radiogroup()) -> igor_xml:xml_element().

radiogroup_to_xml(Record) ->
    #radiogroup{
        visible = Visible,
        on_load = OnLoad,
        on_hover = OnHover,
        items = Items,
        vertical_order = VerticalOrder,
        value = VarValue
    } = Record,
    ?assert(Items =/= undefined),
    ?assert(VerticalOrder =/= undefined),
    ?assert(VarValue =/= undefined),
    Content = igor_xml:pack_subelement('Visible', Visible, {option, {custom_element, fun zeus_igor_custom:binding_to_xml/1}})
    ++ igor_xml:pack_subelement('OnLoad', OnLoad, {option, {custom_element, fun zeus_shared_protocol:action_to_xml/1}})
    ++ igor_xml:pack_subelement('OnHover', OnHover, {option, {custom_element, fun zeus_shared_protocol:popup_to_xml/1}})
    ++ igor_xml:pack_content(Items, {list, {custom_element, fun zeus_shared_protocol:radio_item_to_xml/1}})
    ++ igor_xml:pack_subelement('VerticalOrder', VerticalOrder, boolean)
    ++ igor_xml:pack_subelement('Value', VarValue, {custom_element, fun zeus_igor_custom:binding_to_xml/1}),
    #xmlElement{name = 'Radiogroup', content = Content}.

-spec radiogroup_from_xml(igor_xml:xml_element()) -> radiogroup().

radiogroup_from_xml(XmlElement) ->
    'Radiogroup' = igor_xml:name(XmlElement),
    Visible = igor_xml:parse_subelement(XmlElement, 'Visible', {custom_element, fun zeus_igor_custom:binding_from_xml/1}, undefined),
    OnLoad = igor_xml:parse_subelement(XmlElement, 'OnLoad', {custom_element, fun zeus_shared_protocol:action_from_xml/1}, undefined),
    OnHover = igor_xml:parse_subelement(XmlElement, 'OnHover', {custom_element, fun zeus_shared_protocol:popup_from_xml/1}, undefined),
    Items = igor_xml:parse_content(igor_xml:content(XmlElement), {list, {custom_element, fun zeus_shared_protocol:radio_item_from_xml/1}}, []),
    VerticalOrder = igor_xml:parse_subelement(XmlElement, 'VerticalOrder', boolean, true),
    VarValue = igor_xml:parse_subelement(XmlElement, 'Value', {custom_element, fun zeus_igor_custom:binding_from_xml/1}),
    #radiogroup{
        visible = Visible,
        on_load = OnLoad,
        on_hover = OnHover,
        items = Items,
        vertical_order = VerticalOrder,
        value = VarValue
    }.

-spec property_grid_to_json(property_grid()) -> igor_json:json_object().

property_grid_to_json(Record) ->
    #property_grid{
        visible = Visible,
        on_load = OnLoad,
        on_hover = OnHover,
        collapsed = Collapsed,
        value = VarValue
    } = Record,
    ?assert(Collapsed =/= undefined),
    ?assert(VarValue =/= undefined),
    #{
        <<"type">> => igor_json:pack(property_grid, {custom, fun zeus_shared_protocol:element_type_to_json/1}),
        <<"visible">> => igor_json:pack(Visible, {custom, fun zeus_igor_custom:binding_to_json/1}),
        <<"on_load">> => igor_json:pack(OnLoad, {custom, fun zeus_shared_protocol:action_to_json/1}),
        <<"on_hover">> => igor_json:pack(OnHover, {custom, fun zeus_shared_protocol:popup_to_json/1}),
        <<"collapsed">> => igor_json:pack(Collapsed, boolean),
        <<"value">> => igor_json:pack(VarValue, {custom, fun zeus_igor_custom:binding_to_json/1})
    }.

-spec property_grid_from_json(igor_json:json_object()) -> property_grid().

property_grid_from_json(Json) ->
    #property_grid{
        visible = igor_json:parse(Json, <<"visible">>, {custom, fun zeus_igor_custom:binding_from_json/1}, undefined),
        on_load = igor_json:parse(Json, <<"on_load">>, {custom, fun zeus_shared_protocol:action_from_json/1}, undefined),
        on_hover = igor_json:parse(Json, <<"on_hover">>, {custom, fun zeus_shared_protocol:popup_from_json/1}, undefined),
        collapsed = igor_json:parse(Json, <<"collapsed">>, boolean, false),
        value = igor_json:parse(Json, <<"value">>, {custom, fun zeus_igor_custom:binding_from_json/1})
    }.

-spec property_grid_to_xml(property_grid()) -> igor_xml:xml_element().

property_grid_to_xml(Record) ->
    #property_grid{
        visible = Visible,
        on_load = OnLoad,
        on_hover = OnHover,
        collapsed = Collapsed,
        value = VarValue
    } = Record,
    ?assert(Collapsed =/= undefined),
    ?assert(VarValue =/= undefined),
    Content = igor_xml:pack_subelement('Visible', Visible, {option, {custom_element, fun zeus_igor_custom:binding_to_xml/1}})
    ++ igor_xml:pack_subelement('OnLoad', OnLoad, {option, {custom_element, fun zeus_shared_protocol:action_to_xml/1}})
    ++ igor_xml:pack_subelement('OnHover', OnHover, {option, {custom_element, fun zeus_shared_protocol:popup_to_xml/1}})
    ++ igor_xml:pack_subelement('Collapsed', Collapsed, boolean)
    ++ igor_xml:pack_subelement('Value', VarValue, {custom_element, fun zeus_igor_custom:binding_to_xml/1}),
    #xmlElement{name = 'PropertyGrid', content = Content}.

-spec property_grid_from_xml(igor_xml:xml_element()) -> property_grid().

property_grid_from_xml(XmlElement) ->
    'PropertyGrid' = igor_xml:name(XmlElement),
    Visible = igor_xml:parse_subelement(XmlElement, 'Visible', {custom_element, fun zeus_igor_custom:binding_from_xml/1}, undefined),
    OnLoad = igor_xml:parse_subelement(XmlElement, 'OnLoad', {custom_element, fun zeus_shared_protocol:action_from_xml/1}, undefined),
    OnHover = igor_xml:parse_subelement(XmlElement, 'OnHover', {custom_element, fun zeus_shared_protocol:popup_from_xml/1}, undefined),
    Collapsed = igor_xml:parse_subelement(XmlElement, 'Collapsed', boolean, false),
    VarValue = igor_xml:parse_subelement(XmlElement, 'Value', {custom_element, fun zeus_igor_custom:binding_from_xml/1}),
    #property_grid{
        visible = Visible,
        on_load = OnLoad,
        on_hover = OnHover,
        collapsed = Collapsed,
        value = VarValue
    }.

